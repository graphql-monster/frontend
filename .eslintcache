[{"/Users/milanmedlik/projects/qlgraph/frontend/src/index.tsx":"1","/Users/milanmedlik/projects/qlgraph/frontend/src/serviceWorker.ts":"2","/Users/milanmedlik/projects/qlgraph/frontend/src/App.tsx":"3","/Users/milanmedlik/projects/qlgraph/frontend/src/common/apolloClient.ts":"4","/Users/milanmedlik/projects/qlgraph/frontend/src/contexts/userContext.tsx":"5","/Users/milanmedlik/projects/qlgraph/frontend/src/pages/users/list.tsx":"6","/Users/milanmedlik/projects/qlgraph/frontend/src/pages/user-roles/list.tsx":"7","/Users/milanmedlik/projects/qlgraph/frontend/src/pages/projects/edit.tsx":"8","/Users/milanmedlik/projects/qlgraph/frontend/src/pages/projects/list.tsx":"9","/Users/milanmedlik/projects/qlgraph/frontend/src/pages/projects/GQLPlayground.tsx":"10","/Users/milanmedlik/projects/qlgraph/frontend/src/pages/user-roles/edit.tsx":"11","/Users/milanmedlik/projects/qlgraph/frontend/src/pages/home/home.tsx":"12","/Users/milanmedlik/projects/qlgraph/frontend/src/pages/login/Register.tsx":"13","/Users/milanmedlik/projects/qlgraph/frontend/src/pages/pricing/subsribe.tsx":"14","/Users/milanmedlik/projects/qlgraph/frontend/src/pages/pricing/pricing.tsx":"15","/Users/milanmedlik/projects/qlgraph/frontend/src/components/header/header.tsx":"16","/Users/milanmedlik/projects/qlgraph/frontend/src/components/list/filtered-list.tsx":"17","/Users/milanmedlik/projects/qlgraph/frontend/src/components/list/connect-base.tsx":"18","/Users/milanmedlik/projects/qlgraph/frontend/src/components/editor/edit.tsx":"19","/Users/milanmedlik/projects/qlgraph/frontend/src/components/header/user.tsx":"20","/Users/milanmedlik/projects/qlgraph/frontend/src/pages/projects/defaultSchema.ts":"21","/Users/milanmedlik/projects/qlgraph/frontend/src/components/list/filter-item.tsx":"22","/Users/milanmedlik/projects/qlgraph/frontend/src/components/list/table.tsx":"23","/Users/milanmedlik/projects/qlgraph/frontend/src/components/editor/form.tsx":"24","/Users/milanmedlik/projects/qlgraph/frontend/src/components/common/loading.tsx":"25","/Users/milanmedlik/projects/qlgraph/frontend/src/components/common/unauthorized.tsx":"26","/Users/milanmedlik/projects/qlgraph/frontend/src/components/common/DeleteModal.tsx":"27","/Users/milanmedlik/projects/qlgraph/frontend/src/components/editor/control.tsx":"28","/Users/milanmedlik/projects/qlgraph/frontend/src/components/list/row.tsx":"29","/Users/milanmedlik/projects/qlgraph/frontend/src/components/list/row-item.tsx":"30","/Users/milanmedlik/projects/qlgraph/frontend/src/pages/documentation/Documentation.tsx":"31","/Users/milanmedlik/projects/qlgraph/frontend/src/pages/pricing/subsribe-list.tsx":"32","/Users/milanmedlik/projects/qlgraph/frontend/src/pages/login/Login.tsx":"33","/Users/milanmedlik/projects/qlgraph/frontend/src/pages/login/VerifyUser.tsx":"34","/Users/milanmedlik/projects/qlgraph/frontend/src/pages/login/UserInfo.tsx":"35","/Users/milanmedlik/projects/qlgraph/frontend/src/pages/login/ForgottenPassword.tsx":"36","/Users/milanmedlik/projects/qlgraph/frontend/src/common/utils.ts":"37","/Users/milanmedlik/projects/qlgraph/frontend/src/common/refreshToken.ts":"38"},{"size":504,"mtime":1584997710194,"results":"39","hashOfConfig":"40"},{"size":5295,"mtime":1584988810929,"results":"41","hashOfConfig":"40"},{"size":4297,"mtime":1612376059590,"results":"42","hashOfConfig":"40"},{"size":3691,"mtime":1612705962363,"results":"43","hashOfConfig":"40"},{"size":3085,"mtime":1611859169915,"results":"44","hashOfConfig":"40"},{"size":1924,"mtime":1588081542638,"results":"45","hashOfConfig":"40"},{"size":991,"mtime":1586591576567,"results":"46","hashOfConfig":"40"},{"size":1816,"mtime":1609684298582,"results":"47","hashOfConfig":"40"},{"size":1987,"mtime":1612084979178,"results":"48","hashOfConfig":"40"},{"size":1614,"mtime":1609367494044,"results":"49","hashOfConfig":"40"},{"size":929,"mtime":1586874508416,"results":"50","hashOfConfig":"40"},{"size":2268,"mtime":1609684360237,"results":"51","hashOfConfig":"40"},{"size":5839,"mtime":1612608994292,"results":"52","hashOfConfig":"40"},{"size":6308,"mtime":1609744634136,"results":"53","hashOfConfig":"40"},{"size":4827,"mtime":1609744634139,"results":"54","hashOfConfig":"40"},{"size":3739,"mtime":1612085360288,"results":"55","hashOfConfig":"40"},{"size":3465,"mtime":1612695918122,"results":"56","hashOfConfig":"40"},{"size":3609,"mtime":1609065651934,"results":"57","hashOfConfig":"40"},{"size":3579,"mtime":1609065651932,"results":"58","hashOfConfig":"40"},{"size":4514,"mtime":1612086583888,"results":"59","hashOfConfig":"40"},{"size":847,"mtime":1609155320098,"results":"60","hashOfConfig":"40"},{"size":3361,"mtime":1609744634131,"results":"61","hashOfConfig":"40"},{"size":4233,"mtime":1609744634134,"results":"62","hashOfConfig":"40"},{"size":746,"mtime":1588087178523,"results":"63","hashOfConfig":"40"},{"size":144,"mtime":1585645669465,"results":"64","hashOfConfig":"40"},{"size":226,"mtime":1585645675492,"results":"65","hashOfConfig":"40"},{"size":1870,"mtime":1609065651931,"results":"66","hashOfConfig":"40"},{"size":1733,"mtime":1588099094893,"results":"67","hashOfConfig":"40"},{"size":989,"mtime":1609744634133,"results":"68","hashOfConfig":"40"},{"size":1325,"mtime":1586898749866,"results":"69","hashOfConfig":"40"},{"size":1752,"mtime":1609744562395,"results":"70","hashOfConfig":"40"},{"size":1834,"mtime":1609744634135,"results":"71","hashOfConfig":"40"},{"size":5310,"mtime":1612608800258,"results":"72","hashOfConfig":"40"},{"size":2697,"mtime":1612074435010,"results":"73","hashOfConfig":"40"},{"size":7359,"mtime":1612295816035,"results":"74","hashOfConfig":"40"},{"size":3485,"mtime":1612779541320,"results":"75","hashOfConfig":"40"},{"size":190,"mtime":1612469676873,"results":"76","hashOfConfig":"40"},{"size":710,"mtime":1612693442122,"results":"77","hashOfConfig":"40"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},"h19l25",{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"80"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"80"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"80"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"80"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"80"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"80"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"80"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"80"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"80"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"122","messages":"123","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"80"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"80"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"80"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"80"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"80"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"80"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"80"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"80"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156","usedDeprecatedRules":"80"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159","usedDeprecatedRules":"80"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162","usedDeprecatedRules":"80"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165","usedDeprecatedRules":"80"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168","usedDeprecatedRules":"80"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"171","usedDeprecatedRules":"80"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/milanmedlik/projects/qlgraph/frontend/src/index.tsx",[],["178","179"],"/Users/milanmedlik/projects/qlgraph/frontend/src/serviceWorker.ts",[],"/Users/milanmedlik/projects/qlgraph/frontend/src/App.tsx",["180","181","182"],"import React, { useEffect } from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from 'react-router-dom';\nimport { ApolloProvider } from '@apollo/client';\n\nimport { ProjectEdit } from './pages/projects/edit'\nimport { ProjectList } from './pages/projects/list'\nimport UserList from \"./pages/users/list\";\nimport { Header } from './components/header/header'\nimport { UserProvider } from './contexts/userContext'\n\nimport apolloClient from './common/apolloClient'\nimport UserRoleList from \"./pages/user-roles/list\";\nimport UserRoleEdit from './pages/user-roles/edit'\nimport GQLPlayground from \"./pages/projects/GQLPlayground\";\nimport Home from \"./pages/home/home\";\nimport { Register } from \"./pages/login/Register\";\nimport Login from \"./pages/login/Login\";\nimport { PricingPage } from \"./pages/pricing/pricing\";\nimport SubscribePage from \"./pages/pricing/subsribe\";\nimport Documentation from \"./pages/documentation/Documentation\";\nimport SubscibesListPage from \"./pages/pricing/subsribe-list\";\nimport VerifyUser from \"./pages/login/VerifyUser\";\nimport UserInfo from \"./pages/login/UserInfo\";\nimport ForgottenPassword from \"./pages/login/ForgottenPassword\";\n\n\n\n// This site has 3 pages, all of which are rendered\n// dynamically in the browser (not server rendered).\n//\n// Although the page does not ever refresh, notice how\n// React Router keeps the URL up to date as you navigate\n// through the site. This preserves the browser history,\n// making sure things like the back button and bookmarks\n// work properly.\n\nexport default function BasicExample() {\n\n  return (\n    <ApolloProvider client={apolloClient}>\n      <UserProvider>\n        <Router>\n          <div>\n              <Header />\n            {/*\n              A <Switch> looks through all its children <Route>\n              elements and renders the first one whose path\n              matches the current URL. Use a <Switch> any time\n              you have multiple routes, but you want only one\n              of them to render at a time\n            */}\n            <Switch>\n              <Route exact path=\"/\">\n                <Home />\n              </Route>\n              <Route path=\"/login\">\n                <Login />\n              </Route>\n              <Route path=\"/register\">\n                <Register />\n              </Route>\n\n              <Route path=\"/forgotten-password\">\n                <ForgottenPassword />\n              </Route>\n              \n              <Route path=\"/verify-user/:verifyToken\" component={VerifyUser} />\n              <Route path=\"/pricing\">\n                <PricingPage />\n              </Route>\n              <Route path=\"/subscribe\">\n                <SubscribePage />\n              </Route>\n              <Route path=\"/dashboard\">\n                <Dashboard />\n              </Route>\n              <Route path=\"/documentation\">\n                <Documentation />\n              </Route>\n              <Route path=\"/user/projects/create\" component={ProjectEdit} />\n              <Route path=\"/user/projects/:projectId/graphiql\" component={GQLPlayground} />\n              <Route path=\"/user/projects/:projectId\" component={ProjectEdit} />\n              <Route path=\"/user/projects\">\n                <ProjectList />\n              </Route>\n              <Route path=\"/user/info\">\n                <UserInfo />\n              </Route>\n              <Route path=\"/admin/projects\">\n                <ProjectList adminMode={true}/>\n              </Route>\n              <Route path=\"/admin/users\">\n                <UserList adminMode={true}/>\n              </Route>\n              <Route path=\"/admin/roles\">\n                <UserRoleList adminMode={true}/>\n              </Route>\n              <Route path=\"/admin/subsribes\">\n                <SubscibesListPage adminMode={true}/>\n              </Route>\n              <Route path=\"/user/roles/create\" component={UserRoleEdit} />\n              <Route path=\"/user/roles/:id\" component={UserRoleEdit} />\n            </Switch>\n          </div>\n        </Router>\n      </UserProvider>\n    </ApolloProvider>\n  );\n}\n\n// You can think of these components as \"pages\"\n// in your app.\n\n\nfunction About() {\n  return (\n    <div>\n      <h2>About</h2>\n    </div>\n  );\n}\n\nfunction Dashboard() {\n  return (\n    <div>\n      <h2>Dashboard</h2>\n    </div>\n  );\n}\n\n","/Users/milanmedlik/projects/qlgraph/frontend/src/common/apolloClient.ts",["183"],"/Users/milanmedlik/projects/qlgraph/frontend/src/contexts/userContext.tsx",[],"/Users/milanmedlik/projects/qlgraph/frontend/src/pages/users/list.tsx",[],"/Users/milanmedlik/projects/qlgraph/frontend/src/pages/user-roles/list.tsx",["184","185"],"import React, { useState, useEffect } from \"react\";\nimport FilteredList from \"../../components/list/filtered-list\";\nimport gql from 'graphql-tag';\n\nconst USER_LIST_QUERY = gql`\n  query allUsers($filter: UserFilter){ allUsers(filter: $filter) {\n      id\n      name,\n      models\n    }}\n`;\n\nconst ADMIN_LIST_QUERY = gql`\n  query allUserRoles($filter: UserRoleFilter) {\n  allUserRoles(filter: $filter) {\n      id,\n      role\n    }\n  }\n`;\n\nconst DELETE_MUTATION = gql`\n  mutation deleteUserRole($id: ID!) {\n    deleteUserRole(id: $id) {\n      id\n    }\n  }\n`;\n\n\nexport const UserRoleList: React.FC<{userId?: string, adminMode?: boolean}> = ({userId, adminMode=false}) => {\n    return (\n        <div>\n            <FilteredList \n                name={'Roles'}\n                fields={['role']}\n                userId={userId} \n                adminMode={adminMode}\n                queries={{USER_LIST_QUERY, ADMIN_LIST_QUERY, DELETE_MUTATION}} />\n        </div>\n    )\n}\n\nexport default UserRoleList","/Users/milanmedlik/projects/qlgraph/frontend/src/pages/projects/edit.tsx",["186","187","188","189"],"import React, { useState, useEffect, useCallback } from \"react\";\nimport * as _ from 'lodash'\nimport gql from \"graphql-tag\";\n\nimport BaseEdit from \"../../components/editor/edit\"\nimport { Form } from \"react-bootstrap\";\nimport { TControl } from \"../../components/editor/control\";\n\nimport AceEditor from \"react-ace\";\n\nimport \"ace-builds/src-noconflict/mode-java\";\nimport \"ace-builds/src-noconflict/theme-github\";\n\nconst CREATE_MUTATION = gql`\n  mutation createProject($userId: ID!, $name: String!, $models: String!) {\n    createProject(userId: $userId, name: $name, models: $models) {\n      id\n      name\n      models\n    }\n  }\n`;\n\nconst UPDATE_MUTATION = gql`\n  mutation updateProject($id: ID!, $name: String!, $models: String!) {\n    updateProject(id: $id, name: $name, models: $models) {\n      id\n      name\n      models\n    }\n  }\n`;\n\nconst QUERY = gql`\n  query project($id:ID){ Project(id:$id) {\n      id,\n      name,\n      models\n    }}\n`;\n\nconst ProjectSchemaControl:React.FC<TControl> = ({onChange, value}) => (\n  <>\n   <AceEditor \n      theme=\"github\"\n      width=\"1000px\"\n      value={value}\n      onChange={(value)=>{\n        console.log(value)\n        onChange({target: {value}})\n      }}\n      name=\"UNIQUE_ID_OF_DIV\"\n      editorProps={{ $blockScrolling: true }}\n    />`\n    {/* <Form.Control as=\"textarea\" rows={30} {...{onChange, value}} /> */}\n    </>\n)\n\nexport const ProjectEdit = (data:any) => {\n  const projectId = _.get(data, 'match.params.projectId')\n  \n\n  return (\n    <>\n      <BaseEdit \n        id={projectId} \n        name={'Project'}\n        fields={['name', {\n          name:'models',\n          label: 'Schema',\n          control: ProjectSchemaControl\n        }]}\n        query={{\n            CREATE_MUTATION,\n            UPDATE_MUTATION,\n            QUERY\n        }}\n      />\n    </>\n  );\n};\n","/Users/milanmedlik/projects/qlgraph/frontend/src/pages/projects/list.tsx",["190","191"],"import React, { useState, useEffect } from \"react\";\nimport FilteredList from \"../../components/list/filtered-list\";\nimport gql from 'graphql-tag';\nimport { Link } from \"react-router-dom\";\n\nconst USER_LIST_QUERY = gql`\n  query allProjects($filter: ProjectFilter){ allProjects(filter: $filter) {\n    _port\n      id\n      name,\n      models\n    }}\n`;\n\nconst ADMIN_LIST_QUERY = gql`\n  query allProjects($filter: ProjectFilter){ allProjects(filter: $filter) {\n    _port,\n      id\n      name,\n      models,\n      user {\n          id,\n          email\n      }\n    }}\n`;\n\nconst DELETE_MUTATION = gql`\n  mutation deleteProject($id: ID!) {\n    deleteProject(id: $id) {\n      id\n    }\n  }\n`;\n\nconst GraphiqlLink: React.FC<{value:any, names?:any, item:any}> = ({value,names, item}) => {\n  return <Link to={`/user/projects/${item.id}/graphiql`}>playground</Link>\n}\n\nexport const ProjectList: React.FC<{ adminMode?: boolean}> = ({adminMode=false}) => {\n    const userId = (!adminMode && localStorage.getItem('user.id')) || ''\n    return (\n      <>\n \n            <div className=\"center-y relative text-center\" data-scroll-speed=\"4\">\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <div className=\"col-md-10 offset-md-1\">\n                                <div className=\"col-md-12 text-center\">\n                                    \n            <FilteredList \n                name={'Projects'}\n                fields={[\n                  'name', \n                  {'name': 'id', 'title':'playground', component: GraphiqlLink}]}\n                userId={userId} \n                adminMode={adminMode}\n                queries={{USER_LIST_QUERY, ADMIN_LIST_QUERY, DELETE_MUTATION}} \n                />\n        </div>\n                  \n                                <div className=\"clearfix\"></div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n       </>\n    )\n}\n\nexport default ProjectList","/Users/milanmedlik/projects/qlgraph/frontend/src/pages/projects/GQLPlayground.tsx",[],"/Users/milanmedlik/projects/qlgraph/frontend/src/pages/user-roles/edit.tsx",["192","193","194"],"import React, { useState, useEffect, useCallback } from \"react\";\nimport * as _ from 'lodash'\nimport gql from \"graphql-tag\";\n\nimport BaseEdit from \"../../components/editor/edit\"\n\n\nconst CREATE_MUTATION = gql`\n  mutation createUserRole($role: String!) {\n    createUserRole(role: $role) {\n      id\n      role\n    }\n  }\n`;\n\nconst UPDATE_MUTATION = gql`\n  mutation updateUserRole($id:ID!, $role: String!) {\n    updateUserRole(id: $id, role: $role) {\n      id\n      role\n    }\n  }\n`;\n\nconst QUERY = gql`\n  query userRole($id:ID){ UserRole(id:$id) {\n      id,\n      role,\n    }}\n`;\n\nexport const UserRoleEdit = (data:any) => {\n  const id = _.get(data, 'match.params.id')\n  \n\n  return (\n    <>\n      <BaseEdit \n        id={id} \n        name={'UserRole'}\n        fields={['role']}\n        query={{\n            CREATE_MUTATION,\n            UPDATE_MUTATION,\n            QUERY\n        }}\n      />\n    </>\n  );\n};\n\nexport default UserRoleEdit","/Users/milanmedlik/projects/qlgraph/frontend/src/pages/home/home.tsx",["195"],"import React from 'react'\nimport Typed from 'react-typed'\nimport Button from 'react-bootstrap/Button'\nimport { Link } from 'react-router-dom';\n\nexport const Home = () => {\n\n    return (\n        <div className=\"no-bottom no-top\" id=\"content\">\n            <section className=\"full-height vertical-center\">\n                <div className=\"container\">\n                    <div className=\"row align-items-center\">\n                        <div className=\"col-lg-5\" data-wow-delay=\".5s\">\n                            <div className=\"ready-to-launch\">Ready to launch\n                                <div>\n                                    your&nbsp;\n                                    <Typed className=\"typed id-color\"\n                                        // typedRef={(typed) => { this.typed = typed; }}\n                                        strings={[\n                                            'backend',\n                                            'service',\n                                            'application']}\n                                        typeSpeed={70}\n                                        backSpeed={54}\n                                        startDelay={2000}\n\n                                        loop\n                                    />\n                                </div>\n                            </div>\n\n                            <p className=\"p-lead\">Instant protected Graphql service, with models designed by you. You can connect with React.js, Vue.js or Angular.js app and create application right now</p>\n                            <Link className=\"btn btn-primary btn-round\" to=\"/register\">Try it for free</Link>&nbsp;&nbsp;\n                            <Link className=\"btn btn-round\" to=\"/register\">How it is works?</Link>\n                            <div className=\"mb-sm-30\"></div>\n                        </div>\n\n                        <div className=\"col-lg-6 offset-lg-1\" data-wow-delay=\".5s\">\n                            <img src=\"3.png\" className=\"img-fluid\" alt=\"\" />\n                        </div>\n                    </div>\n                </div>\n            </section>\n\n            <section className=\"full-height vertical-center\">\n            </section>\n        </div>\n\n    );\n}\n\nexport default Home","/Users/milanmedlik/projects/qlgraph/frontend/src/pages/login/Register.tsx",["196","197","198","199","200","201","202","203"],"import React, { useState } from \"react\";\nimport gql from \"graphql-tag\";\nimport { useMutation } from \"@apollo/client\";\nimport { Modal, Form, Alert, Button } from \"react-bootstrap\";\nimport { Link } from 'react-router-dom';\nimport { useHistory } from \"react-router-dom\";\nimport { User, useUserDispatch, USER_LOGIN } from '../../contexts/userContext';\nimport { isEmailValid } from \"../../common/utils\";\n\nconst REGISTER_MUTATION = gql`\n  mutation register($email: String!, $pass: String!) {\n    register_v1(email: $email, password: $pass) {\n      refreshToken\n      token\n      user {\n        roles{name}\n        id,\n        email,\n        verified\n      }\n    }\n  }\n`;\n\nexport const Register: React.FC = () => {\n  const [email, setEmail] = useState(\"ahoj\");\n  const [pass, setPass] = useState(\"ahoj\");\n  const [copy, setCopy] = useState(\"\");\n\n  const history = useHistory()\n  const dispatch = useUserDispatch()\n\n  const [register, { loading, data, error }] = useMutation(REGISTER_MUTATION, {\n    errorPolicy: \"none\",\n  });\n\n  const [invalidEmail, setInvalidEmail] = useState(false);\n\n  const [invalidPass, setInvalidPass] = useState(false);\n  const [validPass, setValidPass] = useState(false);\n\n  const [invalidCopy, setInvalidCopy] = useState(false);\n\n  const onRegister = async () => {\n    if(!isEmailValid(email)) {\n      return setInvalidEmail(true)\n    }\n\n    if (pass !== copy) {\n      setInvalidCopy(true)\n      return\n    }\n\n    try {\n      const { data } = await register({ variables: { email, pass } })\n      dispatch({\n        type: USER_LOGIN,\n        userToken: data.register_v1\n      })\n      history.push('/user/projects')\n    } catch (ex) {\n        console.log('onError', data)\n        setInvalidEmail(true)\n      }\n  \n  };\n\n\n  const onEmailChange = (event: any) => {\n    setEmail(event.target.value);\n    setInvalidEmail(false);\n  };\n\n  const onPasswordChange = (event: any) => {\n    const pass = event.target.value as string\n    const regularExpression = /^(?=.*[0-9])(?=.*[!@#$%^&*])[a-zA-Z0-9!@#$%^&*]{6,16}$/\n    setValidPass(regularExpression.test(pass))\n\n    setPass(pass);\n    setInvalidEmail(false);\n    setInvalidPass(false);\n  };\n\n  const onCopyChange = (event: any) => {\n    const c = event.target.value\n    setCopy(c)\n    setInvalidEmail(false)\n    setInvalidPass(false)\n\n    if (c == pass) {\n      setInvalidCopy(false)\n    }\n  };\n\n  return (<>\n    <section id=\"subheader\" data-bgimage=\"url(images/background/5.png) bottom\">\n      <div className=\"center-y relative text-center\" data-scroll-speed=\"4\">\n        <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"col-md-8 offset-md-2\">\n              <form action='blank.php' className=\"row\" id='form_subscribe' method=\"post\" name=\"myForm\">\n                <div className=\"col-md-12 text-center\">\n                  <h1>User Registration</h1>\n                  <p>All big things starting here</p>\n                </div>\n                <div className=\"clearfix\"></div>\n              </form>\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n\n    <section className=\"no-top\" data-bgimage=\"url(images/background/3.png) top\">\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col-md-6 offset-md-3\">\n            <form name=\"contactForm\" id='contact_form' className=\"form-border\" method=\"post\" action='blank.php'>\n\n\n              <Form>\n                {invalidEmail && (<Alert variant={\"danger\"}>Email is probably taken, did you <Link to=\"/forgotten-password\">forgotten password</Link>?</Alert>)}\n                {invalidCopy && (<Alert variant={\"danger\"}>The retyped password is not the same</Alert>)}\n                <Form.Group controlId=\"formBasicEmail\">\n                  <Form.Label>Email address</Form.Label>\n                  <Form.Control\n                    type=\"email\"\n                    placeholder=\"Enter email\"\n                    onChange={onEmailChange}\n                    value={email}\n                    isInvalid={invalidEmail}\n                  />\n                  <Form.Text className=\"text-muted\">\n                    We'll never share your email with anyone else.\n          </Form.Text>\n                </Form.Group>\n\n                <Form.Group controlId=\"formBasicPassword\">\n                  <Form.Label>Password</Form.Label>\n                  <Form.Control\n                    type=\"password\"\n                    placeholder=\"Password\"\n                    onChange={onPasswordChange}\n                    value={pass}\n                    isInvalid={invalidPass}\n                  />\n                </Form.Group>\n\n                <Form.Group controlId=\"formBasicPassword\">\n                  <Form.Label>Re-Password</Form.Label>\n                  <Form.Control\n                    type=\"password\"\n                    placeholder=\"Retype Password\"\n                    onChange={onCopyChange}\n                    value={copy}\n                    isInvalid={invalidCopy}\n                  />\n                </Form.Group>\n              </Form>\n\n              <div id='submit' className=\"pull-left\">\n                {!loading && <Button className=\"btn-round\" variant=\"primary\" onClick={() => onRegister()}>Register</Button>}\n                {loading && <Button className=\"btn-round\" variant=\"primary\" disabled>Loading...</Button>}\n\n                <div className=\"clearfix\"></div>\n\n                <div className=\"spacer-single\"></div>\n\n                <ul className=\"list s3\">\n                  <li>Or login with:</li>\n                  <li><a href=\"#\">Facebook</a></li>\n                  <li><a href=\"#\">Google</a></li>\n                  <li><a href=\"#\">Instagram</a></li>\n                </ul>\n\n              </div>\n\n            </form>\n          </div>\n        </div>\n      </div>\n    </section>\n  </>\n  );\n};\n\nexport default Register;\n","/Users/milanmedlik/projects/qlgraph/frontend/src/pages/pricing/subsribe.tsx",["204","205","206","207","208","209","210","211","212","213","214"],"import React, { useState, useContext } from 'react'\nimport gql from 'graphql-tag'\nimport { useQuery, useLazyQuery, useMutation } from '@apollo/client'\nimport { useHistory } from \"react-router-dom\";\nimport { User, useUserDispatch, USER_LOGIN } from '../../contexts/userContext';\nimport { Modal, Form, Button, Alert } from 'react-bootstrap'\nimport Recaptcha from 'react-recaptcha'\n\nconst SUBSCRIBE_MUTATION_QL = gql`\n  mutation subsribe($email: String!, $message: String!) {\n    createSubscribe(email: $email, message: $pass) {\n      id\n    }\n  }\n`;\nexport const SubscribePage: React.FC = () => {\n    const [email, setEmail] = useState(localStorage.getItem('user.email') as string)\n    const [pass, setPass] = useState('')\n\n    const [invalidEmail, setInvalidEmail] = useState(false)\n    const [invalidPass, setInvalidPass] = useState(false)\n    const [verified, setVerify] = useState(false)\n\n    const history = useHistory()\n    const dispatch = useUserDispatch()\n\n    const [subsribe, { loading, data, error }] = useMutation(SUBSCRIBE_MUTATION_QL, {\n        errorPolicy: \"none\",\n        onCompleted: (data) => {\n          console.log('e,c', data)\n    \n        },\n        onError: () => {\n          console.log('onError', data)\n          setInvalidEmail(true)\n        }\n      });\n\n    const onSubsribe = async () => {\n        subsribe({ variables: { email, pass } })\n    }\n\n    const onEmailChange = (event: any) => {\n        const email = event.target.value as string\n        const validEmail = !(/^([A-Za-z0-9_\\-.])+@([A-Za-z0-9_\\-.])+\\.([A-Za-z]{2,})$/.test(email))\n\n        setEmail(email)\n        setInvalidEmail(validEmail)\n        setInvalidPass(false)\n    }\n\n    const onTextChange = (event: any) => {\n        setPass(event.target.value)\n        setInvalidEmail(false)\n        setInvalidPass(false)\n    }\n\n    const onHide = () => {\n        setPass('')\n        setInvalidEmail(false)\n        setInvalidPass(false)\n        // doHide()\n    }\n\n    return (<>\n        <section id=\"subheader\" data-bgimage=\"url(images/background/5.png) bottom\">\n            <div className=\"center-y relative text-center\" data-scroll-speed=\"4\">\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <div className=\"col-md-8 offset-md-2\">\n                            <form action='blank.php' className=\"row\" id='form_subscribe' method=\"post\" name=\"myForm\">\n                                <div className=\"col-md-12 text-center\">\n                                    <h1>Subscribe</h1>\n                                    <p>We are almost done</p>\n                                </div>\n                                <div className=\"clearfix\"></div>\n                            </form>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </section>\n\n        <section className=\"no-top\" data-bgimage=\"url(images/background/3.png) top\">\n\n\n        \n            <div className=\"container\">\n                <div className=\"row\">\n                \n                    <div className=\"col-md-6 offset-md-3\">\n                   \n                        <Form name=\"contactForm\" id='contact_form' className=\"form-border\" >\n                            <h3>We working very hard on new features</h3>\n                            <p className=\"p-lead\">\n                                Even we believe we are very close to bring them to a life \n                                But we want to be sure our product will met our costumers satisfaction. \n                                So we decided to push back a little bit and take time for reimlplement some features to improve them. \n                                Even we work very hard they are still not completed yet. \n\n                                Please let us know if You want to be\n                                part of our early-adopters-program to be one of first humans to use them\n                            </p>  \n                            <Form.Group controlId=\"formBasicEmail\">\n\n                                <Form.Label>Email address</Form.Label>\n                                \n                                <Form.Control type=\"text\" placeholder=\"Enter email\" onChange={onEmailChange} value={email} isInvalid={invalidEmail} />\n                                <Form.Control.Feedback type=\"invalid\">\n                                    The email is very probably incorect\n                                </Form.Control.Feedback>\n                            </Form.Group>\n\n\n                            <Form.Group controlId=\"formBasicPassword\">\n                                <Form.Label>Do you want tell us more?</Form.Label>\n                                <Form.Control as='textarea' rows={10} onChange={onTextChange} value={pass} isInvalid={invalidPass} />\n                            </Form.Group>\n\n                            \n                            {<div id='submit' className=\"pull-left\">\n                                {!loading && <Button className=\"btn-round\" variant=\"primary\" onClick={() => onSubsribe()} disabled={!verified || invalidEmail}>Send to us</Button>}\n                                {loading && <Button className=\"btn-round\" variant=\"primary\" disabled>Sending...</Button>}\n                                <div className=\"clearfix\"></div>\n                            </div>}\n\n                            {<div>\n                                <Recaptcha\n                                    sitekey={\"6LeirhoaAAAAADIzp_mcmG0ly-DQSBB5ScfXi3jh\"}\n                                    verifyCallback={(v) => {\n                                        console.log('verifyCallback', v)\n                                        setTimeout(()=>setVerify(true), 300)}\n                                    }\n                                />\n                            </div>}\n\n                        </Form>\n                    </div>\n                </div>\n            </div>\n        </section>\n    </>)\n}\n\nexport default SubscribePage","/Users/milanmedlik/projects/qlgraph/frontend/src/pages/pricing/pricing.tsx",[],"/Users/milanmedlik/projects/qlgraph/frontend/src/components/header/header.tsx",["215","216","217","218","219","220","221","222","223","224","225","226","227"],"import React, { useEffect, useState } from 'react'\nimport { Link } from 'react-router-dom';\nimport { useUserState, useUserDispatch, USER_INIT, USER_LOGOUT } from '../../contexts/userContext';\nimport UserHeaderComponent from './user'\nimport Form from 'react-bootstrap/Form'\nimport Button from 'react-bootstrap/Button'\nimport Modal from 'react-bootstrap/Modal'\nimport Login from '../../pages/login/Login';\nimport Register from '../../pages/login/Register';\n\nexport const Header = () => {\n  const user = useUserState()\n  const userDispatch = useUserDispatch()\n\n  const [showSignIn, setShowSignIn] = useState<boolean>(false)\n  const [showRegister, setShowRegister] = useState(true)\n\n  const handleSignInClose = () => setShowSignIn(false)\n  const handleSignInShow = () => setShowSignIn(true)\n\n  const handleRegisterClose = () => setShowRegister(false)\n  const handleRegisterShow = () => setShowRegister(true)\n\n  const onLogout = () => {\n    userDispatch({ type: USER_LOGOUT })\n  }\n\n  if (user.token) {\n    return <UserHeaderComponent user={user} onLogout={onLogout} />\n  }\n\n  return (\n    <div className=\"header-light transparent scroll-light container\">\n      <div className=\"row\">\n        <div className=\"col-md-12\">\n          <div className=\"d-flex justify-content-between\">\n            <div className=\"align-self-center header-col-left\">\n              <div id=\"logo\">\n                <a href=\"/\">\n                  <img alt=\"\" src=\"logoPQL2.png\" />\n                </a>\n              </div>\n            </div>\n            <div className=\"align-self-center ml-auto header-col-mid\">\n\n              <ul id=\"mainmenu\">\n                <li>\n                  <a href=\"/\">Home</a>\n                  {/* <ul>\n                    <li><a href=\"index.html\">Main</a></li>\n                    <li><a href=\"index-startup.html\">Startup</a></li>\n                    <li><a href=\"index-coworking.html\">Co-working</a></li>\n                    <li><a href=\"index-agency.html\">Agency</a></li>\n                    <li><a href=\"index-apps.html\">Apps</a></li>\n                  </ul> */}\n                </li>\n                <li>\n                  <a href=\"/pricing\">Pricing</a>\n                  {/* <ul>\n                    <li><a href=\"about-us.html\">About Us</a></li>\n                    <li><a href=\"our-team.html\">Our Team</a></li>\n                    <li><a href=\"our-history.html\">Our History</a></li>\n                    <li><a href=\"faq.html\">FAQs</a></li>\n                    <li><a href=\"careers.html\">Careers</a></li>\n                  </ul> */}\n                </li>\n                <li>\n                  <a href=\"/documentation\">Documentation</a>\n                  <ul>\n                    <li><a href=\"/documentation#simple-model\">Simple model</a></li>\n                    <li><a href=\"/documentation#models-with-relation\">Models with relation</a></li>\n                  </ul>\n                </li>\n            \n              </ul>\n            </div>\n            <div className=\"align-self-center ml-auto header-col-right\">\n              &nbsp;&nbsp;<Link className=\"\" to=\"/login\">Login</Link> or <Link className=\"\" to=\"/register\">Register</Link>\n                                    <span id=\"menu-btn\"></span>\n            </div>\n            <div className=\"clearfix\"></div>\n          </div>\n        </div>\n      </div>\n    </div>\n    // <div>\n\n    //   <span onClick={handleSignInShow}>SignIn</span> | <span onClick={handleRegisterShow}>Register</span> |\n    //   <Link to=\"/\">Home</Link> |\n    //   <Link to=\"/pricing\">Pricing</Link>\n\n    //   <SignIn show={showSignIn} onHide={handleSignInClose}/>\n    //   <Register show={showRegister} onHide={handleRegisterClose}/>\n\n    //   <span>{process.env.PROTECTQL_HOST}</span>\n\n\n    // </div>\n  )\n}","/Users/milanmedlik/projects/qlgraph/frontend/src/components/list/filtered-list.tsx",["228","229","230"],"/Users/milanmedlik/projects/qlgraph/frontend/src/components/list/connect-base.tsx",["231","232","233","234","235","236","237","238","239","240"],"import React, { useState, useEffect } from \"react\";\nimport { DropdownButton, Dropdown, Form } from \"react-bootstrap\";\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { getDataFromRaw } from \"../../components/editor/edit\";\n\nexport const ConnectBase: React.FC<{value:any, names?:any, gql: any, item: any}> = ({value, names, gql, item}) => {\n    const element = value\n    const name = names.length>1 && names[1]\n    const elementTitle = element.push && element.reduce && names.length > 1 ? (element as any[]).reduce((p, e)=>p + `, ${e[name]}`, '').substr(2) : element\n  \n    const [title, setTitle] = useState(elementTitle)\n    const [data, setData] = useState<any[]>([])\n  \n    const { refetch: userRefetch, loading: userLoading } = useQuery(gql.QUERY, {\n      onError: (e) => {\n        console.log('ConnectBase:onError >>> ', e.message)\n        if(e.message == 'GraphQL error: Unauhorized'){\n          // setUnauthorized(true)\n        } else {\n          // setError(e)\n        }\n      }, onCompleted: (iraw) => {\n        console.log('user: onCompleted', iraw)\n        // setLoading(false)\n  \n        const dataFields = Object.getOwnPropertyNames(iraw)\n        if(dataFields.length > 0 && iraw[dataFields[0]].length > 0){\n          const raw = iraw[dataFields[0]]\n  \n          const final = raw.map((r:any)=>{\n            return {\n              id: r.id,\n              checked: title.indexOf(r[name]) !== -1,\n              label: r[name]\n            }\n          })\n  \n          setData(final)\n        } else {\n          setData([])\n        }\n        \n      },\n    });\n  \n    const [\n      addMutation,\n      { loading: addMutaionLoading, data: addMutationData, error: addMutationError }\n    ] = useMutation(gql.ADD, {\n      errorPolicy: \"none\",\n      onCompleted: (raw: any) => {\n        const data = getDataFromRaw(raw)\n        console.log(\"ADDED\", raw, data.id);\n      },\n      onError: () => {}\n    });\n  \n    const [\n      removeMutation,\n      { loading: removeMutaionLoading, data: removeMutationData, error: removeMutationError }\n    ] = useMutation(gql.REMOVE, {\n      errorPolicy: \"none\",\n      onCompleted: (raw: any) => {\n        const data = getDataFromRaw(raw)\n        console.log(\"REMOVE\", raw, data.id);\n      },\n      onError: () => {}\n    });\n  \n    const onChecked = (value:any) => {\n      const updated = data.map((d:any)=>{\n        if(d.label === value.label) {\n          d.checked = !d.checked\n        }\n        return {...d}\n      })\n  \n      const updateTitle = (updated as any[]).reduce((p, e) => {\n        if(e.checked) return `${p}, ${e.label}`\n        else return p\n      }, '').substr(1)\n  \n      console.log('onChecked:', {updated, value, updateTitle})\n  \n      if(value.checked){\n        addMutation({\n          variables: {\n            id1: value.id,\n            id2: item.id\n          }\n        });\n      } else {\n        removeMutation({\n          variables: {\n            id1: value.id,\n            id2: item.id\n          }\n        });\n      }\n      \n  \n      setData(updated)\n      setTitle(updateTitle)\n    }\n    \n    // if(element.push && element.reduce && names.length > 1) {\n    //   return (<>ahoj: {(element as any[]).reduce((p, e)=>p + e[names[1]], '')}</>)\n    // }\n  \n    return (<DropdownButton id=\"dropdown-basic-button\" title={title}>\n        {data && data.map((d:any)=>(\n        <Dropdown.Item  onClick={(e:any) => onChecked(d)} >\n          <Form.Check \n              type=\"checkbox\" \n              label={d.label} \n              checked={d.checked} />\n        </Dropdown.Item>))\n        }\n      </DropdownButton>)\n  }\n\n  export default ConnectBase","/Users/milanmedlik/projects/qlgraph/frontend/src/components/editor/edit.tsx",["241","242","243","244","245","246","247","248","249","250","251"],"import React, { useState, useEffect, useCallback } from \"react\";\n\nimport { BaseForm, TBaseForm } from \"./form\";\nimport gql from \"graphql-tag\";\nimport { useMutation, useQuery } from \"@apollo/client\";\nimport { DEFAULT_SCHEMA } from \"../../pages/projects/defaultSchema\";\nimport * as _ from 'lodash'\nimport { Alert } from 'react-bootstrap'\nimport Unauthorized from '../common/unauthorized'\nimport Loading from '../common/loading'\nimport { TField, TControlField } from \"./control\";\n\nexport const getDataFromRaw = (rawData: any) => {\n  const rawName = Object.keys(rawData)[0]\n  return rawData[rawName]\n}\n\nexport type TBaseEdit = Pick<TBaseForm, 'fields'> & {\n  id: string\n  name: string\n  query: any\n}\n\nexport const BaseEdit:React.FC<TBaseEdit> = ({id: externId, query, name, fields}) => {\n  \n\n  const [localId, setLocalId] = useState(externId);\n  const [unauthorized, setUnauthorized] = useState(false);\n\n  const [model, setModel] = useState({\n    name: \"project A\",\n    models: DEFAULT_SCHEMA\n  });\n\n  const skipLoading = !externId\n  const { loading, error } = useQuery(query.QUERY, {\n    variables: {id: externId},\n    skip: skipLoading,\n    onCompleted: (loadedDataRaw: any) =>{\n      if(!loadedDataRaw){\n        return\n      }\n      console.log('loadedDataRaw', loadedDataRaw, skipLoading)\n      const loadedData = getDataFromRaw(loadedDataRaw)\n      \n      console.log('Edit:QUERY', {externId, loadedDataRaw, loadedData})\n\n      if(loadedData){\n        const np = fields.reduce((o:any, field: TField)=> {\n          const fieldName = (field as TControlField).name ? (field as TControlField).name : field as string\n          o[fieldName] = loadedData[fieldName]\n          return o\n        }, {})\n\n        setModel(np)\n      } else {\n        setUnauthorized(true)\n      }\n    }, onError: (e) => {\n      console.log('onError >>> ', e.message)\n      if(e.message == 'GraphQL error: Unauhorized'){\n        setUnauthorized(true)\n      }\n      setModel({name:'', models: ''})\n    }\n  });\n\n  const [\n    createProjectMutation,\n    { loading: createLoading, data: createData, error: createError }\n  ] = useMutation(query.CREATE_MUTATION, {\n    errorPolicy: \"none\",\n    onCompleted: (raw: any) => {\n      const data = getDataFromRaw(raw)\n      console.log(\"CREATED\", raw, data.id);\n      setLocalId(data.id);\n    },\n    onError: () => {}\n  });\n\n  const [updateProjectMutation, { loading:updateLoading, data: updateData, error:updateError }] = useMutation(\n    query.UPDATE_MUTATION,\n    {\n      errorPolicy: \"none\",\n      onCompleted: (data: any) => {\n        console.log(\"UPDATED\", data.updateProject.id);\n        setLocalId(data.createProject.id);\n      },\n      onError: () => {}\n    }\n  );\n\n  const onUpdate = useCallback((model: any) => {\n    console.log('onUpdate >>> ', localId, model)\n    if(localId){\n        updateProjectMutation({\n            variables: {\n              id:localId,\n              ...model\n            }\n          });\n    } else {\n        createProjectMutation({\n            variables: {\n              userId: localStorage.getItem(\"user.id\"),\n              ...model\n            }\n          });\n    }\n    \n  }, [localId]);\n\n  if(unauthorized) {\n    return (<Unauthorized where={`${name} edit`} />)\n  }\n\n  if(loading) {\n    return (<Loading what={name}/>)\n  }\n\n  return (\n    <div>\n      {externId ? <h1>{name} Edit ({externId})</h1> : <h1>{name} create</h1>}\n      {error && <Alert variant={'danger'}>`${error.message}`</Alert>}\n      <BaseForm model={model} doUpdate={onUpdate} edit={Boolean(localId)} fields={fields} />\n    </div>\n  );\n};\n\nexport default BaseEdit","/Users/milanmedlik/projects/qlgraph/frontend/src/components/header/user.tsx",["252","253","254"],"import React from 'react'\nimport { Link } from 'react-router-dom'\nimport Dropdown from 'react-bootstrap/Dropdown'\nimport Nav from 'react-bootstrap/Nav'\nimport Badge from 'react-bootstrap/Badge'\n\nconst UserHeader = ({user, onLogout}:any) => {\n\n    return (\n        <div className=\"header-light transparent scroll-light container\">\n      <div className=\"row\">\n        <div className=\"col-md-12\">\n          <div className=\"d-flex justify-content-between\">\n            <div className=\"align-self-center header-col-left\">\n              <div id=\"logo\">\n                <Link to=\"/user/projects\">\n                  <img alt=\"\" src=\"logoPQL2.png\" />\n                </Link>\n              </div>\n            </div>\n            <div className=\"align-self-center ml-auto header-col-mid\">\n\n              <ul id=\"mainmenu\">\n                <li>\n                  <Link to=\"/user/projects\">Projects</Link>\n                  {/* <ul>\n                    <li><Link to=\"index.html\">Main</Link></li>\n                    <li><Link to=\"index-startup.html\">Startup</Link></li>\n                    <li><Link to=\"index-coworking.html\">Co-working</Link></li>\n                    <li><Link to=\"index-agency.html\">Agency</Link></li>\n                    <li><Link to=\"index-apps.html\">Apps</Link></li>\n                  </ul> */}\n                </li>\n                <li>\n                  <Link to=\"/pricing\">Pricing</Link>\n                  {/* <ul>\n                    <li><Link to=\"about-us.html\">About Us</Link></li>\n                    <li><Link to=\"our-team.html\">Our Team</Link></li>\n                    <li><Link to=\"our-history.html\">Our History</Link></li>\n                    <li><Link to=\"faq.html\">FAQs</Link></li>\n                    <li><Link to=\"careers.html\">Careers</Link></li>\n                  </ul> */}\n                </li>\n                <li>\n                <Link to=\"/documentation\">Documentation</Link>\n                  <ul>\n                    <li><Link to=\"/documentation#simple-model\">Simple model</Link></li>\n                    <li><Link to=\"/documentation#models-with-relation\">Models with relation</Link></li>\n                  </ul>\n                </li>\n                <li>\n                  <Link to=\"#\">Administration</Link>\n                  <ul>\n                    <li><Link to=\"/admin/projects\">All projects</Link></li>\n                    <li><Link to=\"/admin/subsribes\">All subsribes</Link></li>\n                    <li><Link to=\"/admin/users\">All users</Link></li>\n                    <li><Link to=\"/admin/roles\">All roles</Link></li>\n                  </ul>\n                </li>\n              </ul>\n            </div>\n            <div className=\"align-self-center ml-auto header-col-right\">\n            <ul id=\"mainmenu\">\n                <li>\n                  <Link to=\"/user/info\">User</Link>\n                  <ul>\n                    <li><Link to=\"/user/info\" >User Info</Link></li>\n                    <li><Link to=\"/login\" onClick={onLogout}>Logout</Link></li>\n                    \n                  </ul>\n                </li>\n                </ul>\n              &nbsp;&nbsp;\n                                    <span id=\"menu-btn\"></span>\n            </div>\n            <div className=\"clearfix\"></div>\n          </div>\n        </div>\n      </div>\n    </div>\n    //     <div>\n    //     <Nav>\n    //         <Nav.Item>\n    //         <Dropdown>\n    //         <Dropdown.Toggle variant=\"secondary\" size=\"sm\" id=\"dropdown-basic\">\n    //         User Menu\n    //         </Dropdown.Toggle>\n\n    //         <Dropdown.Menu>\n    //         <Dropdown.Item href=\"/user/projects\">All Projects</Dropdown.Item>\n    //         <Dropdown.Divider />\n    //         <Dropdown.Item href=\"#/action-2\">User</Dropdown.Item>\n    //         <Dropdown.Item href=\"#/action-3\" onClick={onLogout}>Logout</Dropdown.Item>\n    //         </Dropdown.Menu>\n    //     </Dropdown>\n    //     </Nav.Item>\n        \n    //     <Nav.Item>\n        \n    //     <Dropdown>\n    //         <Dropdown.Toggle variant=\"secondary\" size=\"sm\" id=\"dropdown-basic\">\n    //         Admin\n    //         </Dropdown.Toggle>\n\n    //         <Dropdown.Menu>\n    //         <Dropdown.Item href=\"/admin/projects\">All Projects</Dropdown.Item>\n    //         <Dropdown.Item href=\"/admin/users\">All Users</Dropdown.Item>\n    //         <Dropdown.Item href=\"/admin/roles\">All Roles</Dropdown.Item>\n    //         </Dropdown.Menu>\n    //     </Dropdown>\n    //     </Nav.Item>\n\n    // </Nav>\n\n    // </div>\n\n    )\n}\n\nexport default UserHeader","/Users/milanmedlik/projects/qlgraph/frontend/src/pages/projects/defaultSchema.ts",[],"/Users/milanmedlik/projects/qlgraph/frontend/src/components/list/filter-item.tsx",["255","256","257","258","259","260","261","262"],"import React, {useState, useEffect, useCallback} from 'react'\nimport { Col, Form, Alert, Button, InputGroup, DropdownButton, Dropdown } from \"react-bootstrap\";\nimport './filter-item.scss'\n\nconst basicOptionsName = {\n    contains : 'contains',\n    not_contains : 'not contains',\n    starts_with : 'starts with',\n    not_starts_with : 'not starts with',\n    ends_with : 'ends with',\n    not_ends_with : 'not ends with',\n    isEmpty : 'is empty',\n}\n\ntype basicOptionsNameType = 'contains' | 'not_contains' | 'starts_with' | 'not_starts_with' | 'ends_with' | 'not_ends_with' | 'isEmpty'\n\n\n\nexport interface IFilterItemParam {\n    fields: any[]\n    onChange: (filter: string | null) => void\n}\n\n  \n\nexport const FilterItem: React.FC<IFilterItemParam> = ({fields, onChange}) => {\n    const [fieldSelected, setFieldSelected] = useState(fields[0])\n    const [optionSelected, setOptionSelected] = useState('contains')\n    const [filterText, setFilterText] = useState('')\n    const [filter, setFilter] = useState<string|null>('null')\n\n    const onFieldChange = (field:any) => {\n        console.log('onFieldChange', field)\n        setFieldSelected(field)\n        processFilter(field, optionSelected, filterText)\n    }\n\n    const onOptionChange = (option:any) => {\n        console.log('onOptionChange', option)\n        setOptionSelected(option)\n        processFilter(fieldSelected, option, filterText)\n    }\n\n    const onFilterChange = (e:any) => {\n        const text = e.target.value\n        console.log('onFilterChange', e, text)\n        setFilterText(text)\n        processFilter(fieldSelected, optionSelected, text)\n    }\n\n    const doFilter = useCallback((f: string | null) => {\n        if(filter != f){\n            console.log('useFilter>>>', f)\n            setFilter(f)\n            onChange(f)\n        }\n    }, [filter, onChange, setFilter])\n\n    const processFilter = useCallback((field, option, text) => {\n        if(!text && option != 'isEmpty') {\n            doFilter(null)\n            return\n        }\n\n        const f = {} as any\n        f[`${field}_${option}`] = text\n        doFilter(f)\n\n    }, [doFilter] )\n\n    const gc = (o:any) => {\n        const o2 = o\n        return () => {\n            //onFieldChange(o2)\n        }\n    }\n\n    const go = (o:any) => {\n        const o2 = o\n        return () => {onOptionChange(o2);}\n    }\n\n\n    return (\n        <InputGroup className=\"mb-3\">\n            <DropdownButton\n                className=\"field-option\"\n                as={InputGroup.Prepend}\n                variant=\"success\"\n                title={fieldSelected}\n                id=\"input-group-dropdown-0\" >\n                    {fields.map((o)=> (<Dropdown.Item key={o} onClick={gc(o)}>{o.toString()}</Dropdown.Item>))}\n            </DropdownButton>\n            <DropdownButton\n                className=\"select-option\"\n                as={InputGroup.Prepend}\n                variant=\"outline-link\"\n                title={basicOptionsName[optionSelected as basicOptionsNameType]}\n                id=\"input-group-dropdown-1\" >\n                    {Object.getOwnPropertyNames(basicOptionsName).map((o)=> (<Dropdown.Item key={o} onClick={go(o)}>{basicOptionsName[o as basicOptionsNameType]}</Dropdown.Item>))}\n            </DropdownButton>\n            <Form.Control value={filterText} onChange={onFilterChange}/>\n        </InputGroup>)\n\n}\n\nexport default FilterItem","/Users/milanmedlik/projects/qlgraph/frontend/src/components/list/table.tsx",["263","264","265","266","267","268","269","270","271"],"import React, {useState} from 'react'\nimport {Link} from 'react-router-dom'\nimport { Table as BTable, Button } from 'react-bootstrap'\n\nimport { useQuery, useMutation } from '@apollo/client';\nimport { ListRow } from './row';\nimport Loading from '../common/loading';\nimport DeleteModal from '../common/DeleteModal';\nimport Unauthorized from '../common/unauthorized';\nimport { DocumentNode } from 'graphql';\nimport { IFilteredField } from './row-item';\n\nexport interface IFilterWithParams {\n  filter?: string\n  params?: string\n}\n\nexport interface ITableQueries {\n  ADMIN_LIST_QUERY: DocumentNode\n  USER_LIST_QUERY: DocumentNode\n  DELETE_MUTATION: DocumentNode\n}\n\nexport interface IProjectList {\n    userId?: string\n    adminMode?: boolean\n    filter: any\n    queries: ITableQueries\n    fields?: IFilteredField[]\n    name: string\n}\n\nexport const Table : React.FC<IProjectList> = ({filter, name, adminMode = false, queries, fields}) => {\n  const [unauthorized, setUnauthorized] = useState(false)\n  const [showDeleteModal, setShowDeleteModal] = useState(false)\n  const [deleteObject, setDeleteObject] = useState(null)\n  const [showDeleteDialog, setShowDeleteDialog] = useState(false)\n  const [deletingOnDeleteDialog, setDeletingOnDeleteDialog] = useState(false)\n\n  const [loading, setLoading] = useState(true)\n  const [data, setData] = useState<any>([])\n  const [error, setError] = useState<any>()\n\n  const { refetch: userRefetch, loading: userLoading } = useQuery(adminMode? queries.ADMIN_LIST_QUERY : queries.USER_LIST_QUERY, {\n    onError: (e) => {\n      console.log('onError >>> ', e.message)\n      if(e.message == 'GraphQL error: Unauhorized'){\n        setUnauthorized(true)\n      } else {\n        setError(e)\n      }\n    }, onCompleted: (d) => {\n      console.log('user: onCompleted', d)\n      setLoading(false)\n\n      const dataFields = Object.getOwnPropertyNames(d)\n      if(dataFields.length > 0 && d[dataFields[0]].length > 0){\n        setData(d[dataFields[0]])\n      } else {\n        setData([])\n      }\n      \n    },\n    variables: {filter}\n  });\n\n\n  \n\n    const [\n      deleteProjectMutation,\n      { loading: deleteLoading, error: deleteError }\n    ] = useMutation(queries.DELETE_MUTATION, {\n      errorPolicy: \"none\",\n      onCompleted: (data: any) => {\n        console.log(\"DELETE\", data.deleteProject);\n        onHideDidaloDelete()\n        userRefetch()\n      },\n      onError: (e) => {\n        console.log('onError >>> ', e.message)\n        if(e.message == 'GraphQL error: Unauhorized'){\n          setUnauthorized(true)\n        }\n      },\n    });\n\n    const onHideDidaloDelete = () => {\n      setShowDeleteDialog(false)\n      setDeleteObject(null)\n    }\n\n    const onDelete = (obj:any) => {\n      setDeletingOnDeleteDialog(false)\n      setShowDeleteDialog(true)\n      setDeleteObject(obj)\n    }\n\n    const doDelete = (deleteObject: any) => {\n      setDeletingOnDeleteDialog(true)\n      deleteProjectMutation({\n        variables: {\n          id: deleteObject.id\n        }\n      });\n    }\n    \n\n    if(unauthorized) {\n      return (<Unauthorized where={'projects'} />)\n    }\n    if (userLoading) return (<Loading what={'projects'} />);\n\n    return (\n        <div>\n            \n            {error && (<div>{`Error! ${error.message}`}</div>)}\n            \n            <BTable responsive>\n              <thead>\n                <tr>\n                  <th>Id</th>\n                  {fields?.map(f => (f!=='id' && <th>{(f as any).name ? (f as any).name : f}</th>))}\n                  {adminMode && <th>User</th>}\n                  <th></th>\n                </tr>\n              </thead>\n              <tbody>\n              {\n                data.length && data.map((projectItem:any)=>(<ListRow name={name} item={projectItem} onDelete={onDelete} fields={fields} />))\n              }\n              </tbody>\n            \n            </BTable>\n            \n            <DeleteModal \n                  show={showDeleteDialog} \n                  onHide={onHideDidaloDelete}\n                  onDelete={doDelete}\n                  category={'project'}\n                  deleteObject={deleteObject}\n                  deleting={deletingOnDeleteDialog}\n                  />\n        </div>\n    )\n}\n\nexport default Table","/Users/milanmedlik/projects/qlgraph/frontend/src/components/editor/form.tsx",["272","273","274"],"import React, { useState, useEffect } from \"react\";\nimport { Form, FormControl, Button } from \"react-bootstrap\";\n\nimport BaseControl, { TField } from './control'\n\nexport type TBaseForm = {\n  model: any;\n  doUpdate: (model:any) => void;\n  edit?: boolean\n  fields: TField[]\n}\n\nexport const BaseForm: React.FC<TBaseForm> = ({ model, fields, doUpdate, edit = false }) => {\n  \n  const onUpdate = () => {\n      doUpdate(model)\n  }\n\n  const onChange = (field:string, value:any) => {\n    model[field] = value\n  }\n\n  return (\n    <div>\n      <Form>\n        {fields.map((field:any)=>(<BaseControl model={model} field={field} onChange={onChange}/>))}\n        <Button onClick={onUpdate}>{edit ? 'Update' : 'Create'}</Button>\n      </Form>\n    </div>\n  );\n};\n","/Users/milanmedlik/projects/qlgraph/frontend/src/components/common/loading.tsx",[],"/Users/milanmedlik/projects/qlgraph/frontend/src/components/common/unauthorized.tsx",[],"/Users/milanmedlik/projects/qlgraph/frontend/src/components/common/DeleteModal.tsx",["275","276","277","278","279","280","281","282","283","284","285"],"import React, { useState, useContext } from 'react'\nimport gql from 'graphql-tag'\nimport { useQuery, useLazyQuery } from '@apollo/client'\nimport { useHistory } from \"react-router-dom\";\nimport { User, useUserDispatch, USER_LOGIN } from '../../contexts/userContext';\nimport { Modal, Form, Button, Alert } from 'react-bootstrap'\n\nexport interface IDeleteModalParams { \n    show: boolean, \n    onHide: () => void, \n    onDelete: (deleteObject: any) => void,\n    category: string,\n    deleteObject? : any\n    deleting? : boolean\n}\n\nexport const DeleteModal: React.FC<IDeleteModalParams> = ({ show, onHide, onDelete, category, deleteObject, deleting }) => {\n\n    const onDeleteAction = () => {\n        if(!deleting){\n            onDelete(deleteObject)\n        }\n    }\n\n    return (\n        <div>\n            <Modal show={show} onHide={onHide}>\n                <Modal.Header closeButton>\n                    <div>\n                        <Modal.Title>Delete {'>>'} {deleteObject && deleteObject.name}  {'<<'}</Modal.Title>\n                    </div>\n                    \n                </Modal.Header>\n\n                <Modal.Body>\n                    {!deleting ? (<p>Are you sure, you want delete {category} item with name <b>'{deleteObject && deleteObject.name}'</b> and id <i>'{deleteObject && deleteObject.id}'</i></p>) : \n                                (<p>Deleting {category} item with name '{deleteObject && deleteObject.name}' and id '{deleteObject && deleteObject.id}' ...</p>) }\n                </Modal.Body>\n\n                <Modal.Footer>\n                    <Button disabled={deleting} variant=\"danger\" type=\"submit\" onClick={onDeleteAction}>Delete</Button>\n                    <Button disabled={deleting} variant=\"primary\" onClick={onHide}>Close</Button>\n                </Modal.Footer>\n            </Modal>\n\n\n        </div>\n    )\n}\n\nexport default DeleteModal","/Users/milanmedlik/projects/qlgraph/frontend/src/components/editor/control.tsx",["286","287"],"import React, { useState, useEffect } from \"react\";\nimport { Form, FormControl, Button } from \"react-bootstrap\";\n\nexport type TControl = {\n  placeholder? : string\n  onChange: (env: any) => void\n  value: string\n}\n\nexport type TControlField = {\n  name: string\n  label?: string\n  placeholder?: string\n  control?: React.FC<TControl>\n  valid?: string\n}\n\nexport type TField = string | TControlField\n\nexport interface IBaseControl {\n  model: any;\n  onChange: (name: string, value:any) => void;\n  edit?: boolean\n  field: TField\n}\n\nexport const BaseControl: React.FC<IBaseControl> = ({ model, field, onChange, edit = false }) => {\n  const name = (field as TControlField).name ? (field as TControlField).name : field as string\n  const label = (field as TControlField).label ? (field as TControlField).label : name\n  const control = (field as TControlField).control ? (field as TControlField).control : null\n\n  const [value, setValue] = useState(model[name]);\n\n  useEffect(()=>{\n    setValue(model[name])\n  }, [field, model])\n\n  const onUpdate = (value:string) => {\n    const obj = {...model} as any\n    obj[name] = value\n\n    setValue(value)\n    onChange(name, value)\n  }\n\n  return (\n    <Form.Group controlId=\"formBasicEmail\">\n          <Form.Label>{label}</Form.Label>\n          {control ? \n            control({onChange:(env: any) => onUpdate(env.target.value), value}) :\n            <Form.Control\n              type=\"text\"\n              placeholder=\"\"\n              onChange={(env: any) => onUpdate(env.target.value)}\n              value={value}\n            />\n          }\n          <FormControl.Feedback type=\"valid\">\n            Yeah you did it!\n          </FormControl.Feedback>\n        </Form.Group>\n  );\n};\n\nexport default BaseControl","/Users/milanmedlik/projects/qlgraph/frontend/src/components/list/row.tsx",[],"/Users/milanmedlik/projects/qlgraph/frontend/src/components/list/row-item.tsx",["288","289"],"import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Button } from 'react-bootstrap'\nimport './row.scss'\n\n\nexport interface IFilteredFieldDesc {\n  name: string\n  title?: string\n  component?: React.FC<any>\n}\n\nexport type IFilteredField = IFilteredFieldDesc | string\n\nexport interface IListRowParams {\n  item: any\n  field: IFilteredField\n}\n\nconst getElementFromField = (item: any, field: IFilteredField) => {\n  const fieldDesc = field as IFilteredFieldDesc\n\n  const names = fieldDesc.name ? fieldDesc.name.split('.') : (field as string).split('.')\n  const element = item[names[0]]\n\n  return {element, name: names[0], names}\n}\n\nexport const ListRowItem: React.FC<IListRowParams> = ({ item, field }) => {\n  const {element, name, names} = getElementFromField(item, field)\n\n  if(!element) {\n    return (<>ERR NOT EXIST:{name}</>)\n  }\n\n  if((field as IFilteredFieldDesc).component) {\n    const component = (field as IFilteredFieldDesc).component\n    return (<>{component && component({value:element, names, item})}</>)\n  }\n\n  if(element.substr && element.length > 50) {\n    return (<>{element.substr(0, 47)}...</>)\n  }\n\n  if(element.push && element.reduce && names.length > 1) {\n    return (<>{(element as any[]).reduce((p, e)=>p + e[names[1]], '')}</>)\n  }\n\n  return (\n    <>\n    {element}\n    </>\n  );\n};\n\n","/Users/milanmedlik/projects/qlgraph/frontend/src/pages/documentation/Documentation.tsx",["290","291","292"],"import React from 'react'\nimport Typed from 'react-typed'\nimport Button from 'react-bootstrap/Button'\nimport { Link } from 'react-router-dom'\nimport './Documentation.scss'\n\nexport const Documentation = () => {\n    const c1 = \n`type Todo @model {\n    name: String!\n    done: Boolean!\n}`\n    return (\n        <div className=\"no-bottom no-top\" id=\"content\">\n            <section className=\"full-height documentation-section\">\n                <h1>Simple Model</h1>\n                <p>Types are similar of types in graphql <a href=\"https://graphql.org/learn/schema/\">https://graphql.org/learn/schema/</a></p>\n                <pre><code>\n                {c1}\n                </code></pre>\n                <p>\n                    The language is pretty readable, but let's go over it so that we can have a shared vocabulary:\n                </p>\n\n<p>\n    <b>Todo</b> is a GraphQL Object Type, meaning it's a type with some fields. For ProtectQL meaning is a model.\n<b>name</b> and <b>done</b> are fields on the Character type. That means that name and done are the only fields that can appear in any part of a GraphQL query that operates on the Todo model/type.\n</p>\n<p>\n    <b>String</b> is one of the built-in scalar types - these are types that resolve to a single scalar object, and can't have sub-selections in the query. We'll go over scalar types more later.\n</p>\n<p>\n    String! means that the field is non-nullable, meaning that the GraphQL service promises to always give you a value when you query this field. In the type language, we'll represent those with an exclamation mark.\n</p>\n\n            </section>\n\n            <section className=\"full-height vertical-center\">\n            </section>\n        </div>\n    );\n}\n\nexport default Documentation","/Users/milanmedlik/projects/qlgraph/frontend/src/pages/pricing/subsribe-list.tsx",["293","294","295"],"import React, { useState, useEffect } from \"react\";\nimport FilteredList from \"../../components/list/filtered-list\";\nimport gql from 'graphql-tag';\nimport { Link } from \"react-router-dom\";\n\nconst USER_LIST_QUERY = gql`\n  query allSubscribes($filter: SubscribeFilter){ allSubscribes(filter: $filter) {\n    id,\n    email,\n    message\n    }}\n`;\n\nconst ADMIN_LIST_QUERY = gql`\n  query allSubscribes($filter: SubscribeFilter){ allSubscribes(filter: $filter) {\n    id,\n    email,\n    message\n    }}\n`;\n\nconst DELETE_MUTATION = gql`\n  mutation deleteSubsribe($id: ID!) {\n    deleteSubscribe(id: $id) {\n      id\n    }\n  }\n`;\n\nconst GraphiqlLink: React.FC<{value:any, names?:any, item:any}> = ({value,names, item}) => {\n  return <Link to={`/user/projects/${item.id}/graphiql`}>playground</Link>\n}\n\nexport const SubscibesListPage: React.FC<{userId?: string, adminMode?: boolean}> = ({userId, adminMode=false}) => {\n    return (\n      <>\n \n            <div className=\"center-y relative text-center\" data-scroll-speed=\"4\">\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <div className=\"col-md-10 offset-md-1\">\n                                <div className=\"col-md-12 text-center\">\n                                    \n            <FilteredList \n                name={'Subsribe'}\n                fields={[\n                  'email',\n                  'message']}\n                userId={userId} \n                adminMode={adminMode}\n                queries={{USER_LIST_QUERY, ADMIN_LIST_QUERY, DELETE_MUTATION}} \n                />\n        </div>\n                  \n                                <div className=\"clearfix\"></div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n       </>\n    )\n}\n\nexport default SubscibesListPage","/Users/milanmedlik/projects/qlgraph/frontend/src/pages/login/Login.tsx",["296","297","298","299","300","301","302","303","304"],"import React, { useState, useContext } from 'react'\nimport gql from 'graphql-tag'\nimport { Link } from 'react-router-dom';\nimport { useQuery, useLazyQuery, useMutation } from '@apollo/client'\nimport { useHistory } from \"react-router-dom\";\nimport { User, useUserDispatch, USER_LOGIN } from '../../contexts/userContext';\nimport { Modal, Form, Button, Alert } from 'react-bootstrap'\nimport { isEmailValid } from '../../common/utils';\n\nconst LOGIN_QL = gql`\n  mutation Login($email: String!, $pass: String!) {\n    login_v1(email: $email, password:$pass) {\n      token,\n      refreshToken,\n      user {\n        id\n        email,\n        verified,\n        roles {\n          name\n        }\n    }\n    } \n}\n`;\n\nexport const Login: React.FC = () => {\n    const [email, setEmail] = useState(localStorage.getItem('user.email') as string)\n    const [pass, setPass] = useState('')\n\n    const [invalidEmail, setInvalidEmail] = useState(false)\n    const [invalidPass, setInvalidPass] = useState(false)\n\n    const history = useHistory()\n    const dispatch = useUserDispatch()\n\n    const [login, { loading, data, error }] = useMutation(LOGIN_QL, { errorPolicy: 'none' });\n\n    const onLogin = async () => {\n        if(!isEmailValid(email)) {\n            return setInvalidEmail(true)\n        }\n\n        try {\n            const {data}:any = await login({ variables: { email, pass } })\n            dispatch({\n                type: USER_LOGIN,\n                userToken: data.login_v1 as User\n            })\n            history.push('/user/projects')\n        } catch(e) {\n            setInvalidEmail(true)\n            setInvalidPass(true)\n            setPass('')\n        }\n        \n    }\n\n    const onEmailChange = (event: any) => {\n        setEmail(event.target.value)\n        setInvalidEmail(false)\n        setInvalidPass(false)\n    }\n\n    const onPasswordChange = (event: any) => {\n        setPass(event.target.value)\n        setInvalidEmail(false)\n        setInvalidPass(false)\n    }\n\n    return (<>\n        <section id=\"subheader\" data-bgimage=\"url(images/background/5.png) bottom\">\n            <div className=\"center-y relative text-center\" data-scroll-speed=\"4\">\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <div className=\"col-md-8 offset-md-2\">\n                            <form action='blank.php' className=\"row\" id='form_subscribe' method=\"post\" name=\"myForm\">\n                                <div className=\"col-md-12 text-center\">\n                                    <h1>User Login</h1>\n                                    <p>We was missed you already</p>\n                                </div>\n                                <div className=\"clearfix\"></div>\n                            </form>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </section>\n\n        <section className=\"no-top\" data-bgimage=\"url(images/background/3.png) top\">\n            <div className=\"container\">\n                <div className=\"row\">\n                    <div className=\"col-md-6 offset-md-3\">\n                        <Form name=\"contactForm\" id='contact_form' className=\"form-border\" >\n                            {!invalidPass && <h3>Login to your account</h3>}\n                            {invalidPass && <Alert variant={'danger'}>Email or password is not valid. Did You <Link to=\"/forgotten-password\">forgotten your password</Link>?</Alert>}\n                            <Form.Group controlId=\"formBasicEmail\">\n\n                                <Form.Label>Email address</Form.Label>\n                                <Form.Control type=\"text\" placeholder=\"Enter email\" onChange={onEmailChange} value={email} isInvalid={invalidEmail} />\n                            </Form.Group>\n\n\n                            <Form.Group controlId=\"formBasicPassword\">\n                                <Form.Label>Password</Form.Label>\n                                <Form.Control type='password' onChange={onPasswordChange} value={pass} isInvalid={invalidPass} />\n                                <Form.Text className=\"text-muted\">\n                                    We'll never share your password with anyone else.\n                                </Form.Text>\n                            </Form.Group>\n\n                            <div id='submit' className=\"pull-left\">\n                                {!loading && <Button className=\"btn-round\" variant=\"primary\" onClick={() => onLogin()}>Login</Button>}\n                                {loading && <Button className=\"btn-round\" variant=\"primary\" disabled>Loading...</Button>}\n                                <div className=\"clearfix\"></div>\n\n                                <div className=\"spacer-single\"></div>\n\n                                <ul className=\"list s3\">\n                                    <li>Or login with:</li>\n                                    <li><a href=\"#\">Facebook</a></li>\n                                    <li><a href=\"#\">Google</a></li>\n                                    <li><a href=\"#\">Instagram</a></li>\n                                </ul>\n\n                            </div>\n\n                        </Form>\n                    </div>\n                </div>\n            </div>\n        </section>\n    </>\n    )\n\n}\n\nexport default Login","/Users/milanmedlik/projects/qlgraph/frontend/src/pages/login/VerifyUser.tsx",["305","306","307","308","309","310","311","312"],"import React, { useEffect, useState } from \"react\";\nimport gql from \"graphql-tag\";\nimport { useMutation } from \"@apollo/client\";\nimport { Modal, Form, Alert, Button } from \"react-bootstrap\";\nimport { Link } from 'react-router-dom';\nimport { useHistory } from \"react-router-dom\";\nimport { User, useUserDispatch, USER_LOGIN } from '../../contexts/userContext';\nimport * as _ from 'lodash'\n\nconst VERIFY_EMAIL_MUTATION = gql`\n  mutation verifyEmail($verifyToken: String!) {\n    verifyEmail_v1(verifyToken: $verifyToken) {\n      refreshToken\n      token\n      user {\n        roles{name}\n        id,\n        email,\n        verified\n      }\n    }\n  }\n`;\n\nexport const VerifyUser: React.FC<any> = ({match}) => {\n  const verifyToken = _.get(match, 'params.verifyToken')\n  const [verified, setVerified] = useState(false);\n\n  const history = useHistory()\n  const dispatch = useUserDispatch()\n\n  const [verify, { loading: verifying, data, error: verifiedError }] = useMutation(VERIFY_EMAIL_MUTATION, {\n    errorPolicy: \"none\",\n  });\n\n  const doVerifyUser = async () => {\n    try {\n      const { data } = await verify({ variables: { verifyToken } })\n      dispatch({\n        type: USER_LOGIN,\n        userToken: data.verifyEmail_v1\n      })\n      setVerified(true)\n      localStorage.setItem('user.verifyToken', verifyToken)\n      setTimeout(()=>{\n        history.replace('/user/projects')\n      }, 2000)\n    } catch (ex) {\n      console.log('onError', data)\n    }\n  \n  };\n\n  const onVerifyUser = () => {\n    const previouslyVerified = localStorage.getItem('user.verifyToken')\n    const userVerified = localStorage.getItem('user.verified') == 'true'\n\n    // user probably comming with the same link\n    // what was for his first verified\n    if(userVerified && previouslyVerified == verifyToken) {\n      history.replace('/user/projects')\n    } else {\n      doVerifyUser()\n    }\n    \n  }\n\n  useEffect(()=>{\n   if(verifyToken){\n    onVerifyUser()\n   }\n  }, [verifyToken])\n  \n\n  return (<section>\n    <div className=\"center-y relative text-center\" data-scroll-speed=\"4\">\n    <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"col-md-8 offset-md-2\">\n              {verified ? (<div className=\"alert alert-success\" role=\"alert\">Your account was verified <Button>Start creating</Button></div>): null} \n              {verifying ? (<div className=\"alert alert-dark\" role=\"alert\">Your accont is verifing...</div>): null}\n              {!verifyToken || verifiedError ? ( <div className=\"alert alert-dark\" role=\"alert\">The code is invalid or already applyed</div>): null}\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>)\n};\n\nexport default VerifyUser;\n","/Users/milanmedlik/projects/qlgraph/frontend/src/pages/login/UserInfo.tsx",["313","314","315","316","317","318","319","320","321","322","323","324","325","326"],"import React, { useState } from \"react\";\nimport gql from \"graphql-tag\";\nimport { useMutation } from \"@apollo/client\";\nimport { Modal, Form, Alert, Button } from \"react-bootstrap\";\nimport { Link } from 'react-router-dom';\nimport { useHistory } from \"react-router-dom\";\nimport { User, useUserDispatch, USER_LOGIN } from '../../contexts/userContext';\nimport { userInfo } from \"os\";\n\nconst CHANGE_PASSWORD_MUTATION = gql`\n  mutation changePassword($userId: ID!, $oldPassword: String!, $newPassword: String!) {\n    changePassword_v1(userId: $userId, oldPassword: $oldPassword, newPassword: $newPassword) {\n      refreshToken\n      token\n      user {\n        roles{name}\n        id,\n        email,\n        verified\n      }\n    }\n  }\n`;\n\nconst VERIFY_EMAIL_RESEND_MUTATION = gql`\n  mutation verifyEmailResend($userId: ID!) {\n    verifyEmailResend_v1(userId: $userId) {\n      status\n    }\n  }\n`;\n\nexport const UserInfo: React.FC = () => {\n  const [oldPassword, setOldPassword] = useState(\"ahoj\");\n  const [newPassword, setNewPassword] = useState(\"ahoj\");\n  const [newPasswordCopy, setNewPasswordCopy] = useState(\"\");\n  const [showPasswordChanged, setShowPasswordChanged] = useState(false);\n  const [invalidPasswordCopy, setInvalidNewPasswordCopy] = useState(false);\n\n  const [showVerifyEmailSended, setShowVerifyEmailSended] = useState(false);\n  const history = useHistory()\n  const dispatch = useUserDispatch()\n\n  \n\n  const [invalidOldPassword, setInvalidOldPassword] = useState(false);\n\n  const [invalidPass, setInvalidPass] = useState(false);\n  const [validPass, setValidPass] = useState(false);\n\n  \n\n  const userId = localStorage.getItem('user.id') || ''\n  const userEmail = localStorage.getItem('user.email') || ''\n  const userVerified = localStorage.getItem('user.verified') == 'true'\n\n  const [changePassword, { loading, data, error }] = useMutation(CHANGE_PASSWORD_MUTATION, {\n    errorPolicy: \"none\",\n  });\n\n  const [verifyEmailResend, { loading: resendLoading, data: resend, error: resendError }] = useMutation(VERIFY_EMAIL_RESEND_MUTATION, {\n    errorPolicy: \"none\",\n  });\n\n  const onVerifyEmailResend = async () => {\n\n    try {\n      const { data } = await verifyEmailResend({ variables: { userId } })\n      setShowVerifyEmailSended(true)\n      // show notify\n      setTimeout(()=>{\n        setShowVerifyEmailSended(false)\n      }, 5000)\n    } catch (ex) {\n        console.log('onError', data)\n      }\n  \n  };\n\n  const onChangePassword = async () => {\n    if (newPassword !== newPasswordCopy) {\n      setInvalidNewPasswordCopy(true)\n      return\n    }\n\n    try {\n      const { data } = await changePassword({ variables: { userId, oldPassword, newPassword } })\n      dispatch({\n        type: USER_LOGIN,\n        userToken: data.changePassword_v1\n      })\n      setShowPasswordChanged(true)\n      \n      setOldPassword('')\n      setNewPassword('')\n      setNewPasswordCopy('')\n\n      // show notify\n      setTimeout(()=>{\n        setShowPasswordChanged(false)\n      }, 5000)\n    } catch (ex) {\n        console.log('onError', data)\n        setInvalidOldPassword(true)\n      }\n  \n  };\n\n\n  const onCurrentPasswordChange = (event: any) => {\n    setOldPassword(event.target.value);\n    setInvalidOldPassword(false);\n  };\n\n  const onNewPasswordChange = (event: any) => {\n    const pass = event.target.value as string\n    const regularExpression = /^(?=.*[0-9])(?=.*[!@#$%^&*])[a-zA-Z0-9!@#$%^&*]{6,16}$/\n    setValidPass(regularExpression.test(pass))\n\n    setNewPassword(pass);\n    setInvalidOldPassword(false);\n    setInvalidPass(false);\n    \n    if (pass == newPasswordCopy) {\n      setInvalidNewPasswordCopy(false)\n    }\n  };\n\n  const onNewPasswordCopyChange = (event: any) => {\n    const c = event.target.value\n    setNewPasswordCopy(c)\n    setInvalidOldPassword(false)\n    setInvalidPass(false)\n\n    if (c == newPassword) {\n      setInvalidNewPasswordCopy(false)\n    }\n  };\n\n  return (<>\n\n\n    <section className=\"no-top\" data-bgimage=\"url(images/background/3.png) top\">\n      <div className=\"col-md-12 text-center\">\n          <h1>User Setting</h1>\n          {showPasswordChanged ? (<div className=\"alert alert-success\" role=\"alert\">The password was changed</div>): null}\n          {showVerifyEmailSended ? (<div className=\"alert alert-success\" role=\"alert\">Email with verify link was re-send to {userEmail}</div>): null}\n      </div>\n      <div className=\"col-md-12 text-center\">\n          <h2>Email</h2>\n      </div>\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col-md-2 offset-md-3\">\n            {userEmail}\n          </div>\n          <div className=\"col-md-7 \">\n            {userVerified?<div>Verified</div>: <div>\n              not verified <Button className=\"btn-sm\" variant=\"warning\" onClick={() => onVerifyEmailResend()} disabled={showVerifyEmailSended}>Resent email with link for verify</Button>\n              \n            </div>}\n          </div>\n          <div className=\"spacer-single\"></div>\n          </div>\n        </div>\n      <div className=\"col-md-12 text-center\">\n          <h2>Change passwod</h2>\n      </div>\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col-md-6 offset-md-3\">\n            <form name=\"contactForm\" id='contact_form' className=\"form-border\" method=\"post\" action='blank.php'>\n\n\n              <Form>\n                {invalidOldPassword && (<Alert variant={\"danger\"}>Current password is incorect</Alert>)}\n                {invalidPasswordCopy && (<Alert variant={\"danger\"}>The retyped password is not the same</Alert>)}\n                <Form.Group controlId=\"formBasicEmail\">\n                  <Form.Label>Current password</Form.Label>\n                  <Form.Control\n                    type=\"password\"\n                    placeholder=\"Enter email\"\n                    onChange={onCurrentPasswordChange}\n                    value={oldPassword}\n                    isInvalid={invalidOldPassword}\n                  />\n                </Form.Group>\n\n                <Form.Group controlId=\"formBasicPassword\">\n                  <Form.Label>New password</Form.Label>\n                  <Form.Control\n                    type=\"password\"\n                    placeholder=\"Password\"\n                    onChange={onNewPasswordChange}\n                    value={newPassword}\n                    isInvalid={invalidPass}\n                  />\n                </Form.Group>\n\n                <Form.Group controlId=\"formBasicPassword\">\n                  <Form.Label>Repeat New Password</Form.Label>\n                  <Form.Control\n                    type=\"password\"\n                    placeholder=\"Retype Password\"\n                    onChange={onNewPasswordCopyChange}\n                    value={newPasswordCopy}\n                    isInvalid={invalidPasswordCopy}\n                  />\n                </Form.Group>\n              </Form>\n\n              <div id='submit' className=\"pull-left\">\n                {!loading && <Button className=\"btn-round\" variant=\"primary\" onClick={() => onChangePassword()}>Change Password</Button>}\n                {loading && <Button className=\"btn-round\" variant=\"primary\" disabled>Loading...</Button>}\n\n                <div className=\"clearfix\"></div>\n\n                \n\n              </div>\n\n            </form>\n          </div>\n        </div>\n      </div>\n    </section>\n  </>\n  );\n};\n\nexport default UserInfo;\n","/Users/milanmedlik/projects/qlgraph/frontend/src/pages/login/ForgottenPassword.tsx",["327","328","329","330","331","332","333","334","335","336","337","338","339","340"],"/Users/milanmedlik/projects/qlgraph/frontend/src/common/utils.ts",[],"/Users/milanmedlik/projects/qlgraph/frontend/src/common/refreshToken.ts",[],{"ruleId":"341","replacedBy":"342"},{"ruleId":"343","replacedBy":"344"},{"ruleId":"345","severity":1,"message":"346","line":1,"column":17,"nodeType":"347","messageId":"348","endLine":1,"endColumn":26},{"ruleId":"345","severity":1,"message":"349","line":6,"column":3,"nodeType":"347","messageId":"348","endLine":6,"endColumn":7},{"ruleId":"345","severity":1,"message":"350","line":120,"column":10,"nodeType":"347","messageId":"348","endLine":120,"endColumn":15},{"ruleId":"351","severity":1,"message":"352","line":105,"column":79,"nodeType":"353","messageId":"354","endLine":105,"endColumn":81},{"ruleId":"345","severity":1,"message":"355","line":1,"column":17,"nodeType":"347","messageId":"348","endLine":1,"endColumn":25},{"ruleId":"345","severity":1,"message":"346","line":1,"column":27,"nodeType":"347","messageId":"348","endLine":1,"endColumn":36},{"ruleId":"345","severity":1,"message":"355","line":1,"column":17,"nodeType":"347","messageId":"348","endLine":1,"endColumn":25},{"ruleId":"345","severity":1,"message":"346","line":1,"column":27,"nodeType":"347","messageId":"348","endLine":1,"endColumn":36},{"ruleId":"345","severity":1,"message":"356","line":1,"column":38,"nodeType":"347","messageId":"348","endLine":1,"endColumn":49},{"ruleId":"345","severity":1,"message":"357","line":6,"column":10,"nodeType":"347","messageId":"348","endLine":6,"endColumn":14},{"ruleId":"345","severity":1,"message":"355","line":1,"column":17,"nodeType":"347","messageId":"348","endLine":1,"endColumn":25},{"ruleId":"345","severity":1,"message":"346","line":1,"column":27,"nodeType":"347","messageId":"348","endLine":1,"endColumn":36},{"ruleId":"345","severity":1,"message":"355","line":1,"column":17,"nodeType":"347","messageId":"348","endLine":1,"endColumn":25},{"ruleId":"345","severity":1,"message":"346","line":1,"column":27,"nodeType":"347","messageId":"348","endLine":1,"endColumn":36},{"ruleId":"345","severity":1,"message":"356","line":1,"column":38,"nodeType":"347","messageId":"348","endLine":1,"endColumn":49},{"ruleId":"345","severity":1,"message":"358","line":3,"column":8,"nodeType":"347","messageId":"348","endLine":3,"endColumn":14},{"ruleId":"345","severity":1,"message":"359","line":4,"column":10,"nodeType":"347","messageId":"348","endLine":4,"endColumn":15},{"ruleId":"345","severity":1,"message":"360","line":7,"column":10,"nodeType":"347","messageId":"348","endLine":7,"endColumn":14},{"ruleId":"345","severity":1,"message":"361","line":33,"column":37,"nodeType":"347","messageId":"348","endLine":33,"endColumn":42},{"ruleId":"345","severity":1,"message":"362","line":40,"column":10,"nodeType":"347","messageId":"348","endLine":40,"endColumn":19},{"ruleId":"351","severity":1,"message":"352","line":90,"column":11,"nodeType":"353","messageId":"354","endLine":90,"endColumn":13},{"ruleId":"363","severity":1,"message":"364","line":171,"column":23,"nodeType":"365","endLine":171,"endColumn":35},{"ruleId":"363","severity":1,"message":"364","line":172,"column":23,"nodeType":"365","endLine":172,"endColumn":35},{"ruleId":"363","severity":1,"message":"364","line":173,"column":23,"nodeType":"365","endLine":173,"endColumn":35},{"ruleId":"345","severity":1,"message":"366","line":1,"column":27,"nodeType":"347","messageId":"348","endLine":1,"endColumn":37},{"ruleId":"345","severity":1,"message":"367","line":3,"column":10,"nodeType":"347","messageId":"348","endLine":3,"endColumn":18},{"ruleId":"345","severity":1,"message":"368","line":3,"column":20,"nodeType":"347","messageId":"348","endLine":3,"endColumn":32},{"ruleId":"345","severity":1,"message":"360","line":5,"column":10,"nodeType":"347","messageId":"348","endLine":5,"endColumn":14},{"ruleId":"345","severity":1,"message":"369","line":5,"column":33,"nodeType":"347","messageId":"348","endLine":5,"endColumn":43},{"ruleId":"345","severity":1,"message":"359","line":6,"column":10,"nodeType":"347","messageId":"348","endLine":6,"endColumn":15},{"ruleId":"345","severity":1,"message":"370","line":6,"column":31,"nodeType":"347","messageId":"348","endLine":6,"endColumn":36},{"ruleId":"345","severity":1,"message":"371","line":24,"column":11,"nodeType":"347","messageId":"348","endLine":24,"endColumn":18},{"ruleId":"345","severity":1,"message":"372","line":25,"column":11,"nodeType":"347","messageId":"348","endLine":25,"endColumn":19},{"ruleId":"345","severity":1,"message":"361","line":27,"column":39,"nodeType":"347","messageId":"348","endLine":27,"endColumn":44},{"ruleId":"345","severity":1,"message":"373","line":58,"column":11,"nodeType":"347","messageId":"348","endLine":58,"endColumn":17},{"ruleId":"345","severity":1,"message":"346","line":1,"column":17,"nodeType":"347","messageId":"348","endLine":1,"endColumn":26},{"ruleId":"345","severity":1,"message":"374","line":3,"column":41,"nodeType":"347","messageId":"348","endLine":3,"endColumn":50},{"ruleId":"345","severity":1,"message":"357","line":5,"column":8,"nodeType":"347","messageId":"348","endLine":5,"endColumn":12},{"ruleId":"345","severity":1,"message":"358","line":6,"column":8,"nodeType":"347","messageId":"348","endLine":6,"endColumn":14},{"ruleId":"345","severity":1,"message":"359","line":7,"column":8,"nodeType":"347","messageId":"348","endLine":7,"endColumn":13},{"ruleId":"345","severity":1,"message":"375","line":8,"column":8,"nodeType":"347","messageId":"348","endLine":8,"endColumn":13},{"ruleId":"345","severity":1,"message":"376","line":9,"column":8,"nodeType":"347","messageId":"348","endLine":9,"endColumn":16},{"ruleId":"345","severity":1,"message":"377","line":15,"column":10,"nodeType":"347","messageId":"348","endLine":15,"endColumn":20},{"ruleId":"345","severity":1,"message":"378","line":16,"column":10,"nodeType":"347","messageId":"348","endLine":16,"endColumn":22},{"ruleId":"345","severity":1,"message":"379","line":18,"column":9,"nodeType":"347","messageId":"348","endLine":18,"endColumn":26},{"ruleId":"345","severity":1,"message":"380","line":19,"column":9,"nodeType":"347","messageId":"348","endLine":19,"endColumn":25},{"ruleId":"345","severity":1,"message":"381","line":21,"column":9,"nodeType":"347","messageId":"348","endLine":21,"endColumn":28},{"ruleId":"345","severity":1,"message":"382","line":22,"column":9,"nodeType":"347","messageId":"348","endLine":22,"endColumn":27},{"ruleId":"345","severity":1,"message":"349","line":2,"column":9,"nodeType":"347","messageId":"348","endLine":2,"endColumn":13},{"ruleId":"345","severity":1,"message":"383","line":5,"column":9,"nodeType":"347","messageId":"348","endLine":5,"endColumn":15},{"ruleId":"351","severity":1,"message":"384","line":29,"column":18,"nodeType":"353","messageId":"354","endLine":29,"endColumn":20},{"ruleId":"345","severity":1,"message":"346","line":1,"column":27,"nodeType":"347","messageId":"348","endLine":1,"endColumn":36},{"ruleId":"345","severity":1,"message":"385","line":14,"column":22,"nodeType":"347","messageId":"348","endLine":14,"endColumn":33},{"ruleId":"345","severity":1,"message":"386","line":14,"column":44,"nodeType":"347","messageId":"348","endLine":14,"endColumn":55},{"ruleId":"351","severity":1,"message":"352","line":17,"column":22,"nodeType":"353","messageId":"354","endLine":17,"endColumn":24},{"ruleId":"345","severity":1,"message":"387","line":48,"column":18,"nodeType":"347","messageId":"348","endLine":48,"endColumn":35},{"ruleId":"345","severity":1,"message":"388","line":48,"column":43,"nodeType":"347","messageId":"348","endLine":48,"endColumn":58},{"ruleId":"345","severity":1,"message":"389","line":48,"column":67,"nodeType":"347","messageId":"348","endLine":48,"endColumn":83},{"ruleId":"345","severity":1,"message":"390","line":60,"column":18,"nodeType":"347","messageId":"348","endLine":60,"endColumn":38},{"ruleId":"345","severity":1,"message":"391","line":60,"column":46,"nodeType":"347","messageId":"348","endLine":60,"endColumn":64},{"ruleId":"345","severity":1,"message":"392","line":60,"column":73,"nodeType":"347","messageId":"348","endLine":60,"endColumn":92},{"ruleId":"345","severity":1,"message":"346","line":1,"column":27,"nodeType":"347","messageId":"348","endLine":1,"endColumn":36},{"ruleId":"345","severity":1,"message":"393","line":4,"column":8,"nodeType":"347","messageId":"348","endLine":4,"endColumn":11},{"ruleId":"345","severity":1,"message":"394","line":7,"column":13,"nodeType":"347","messageId":"348","endLine":7,"endColumn":14},{"ruleId":"351","severity":1,"message":"352","line":61,"column":20,"nodeType":"353","messageId":"354","endLine":61,"endColumn":22},{"ruleId":"345","severity":1,"message":"395","line":70,"column":16,"nodeType":"347","messageId":"348","endLine":70,"endColumn":29},{"ruleId":"345","severity":1,"message":"396","line":70,"column":37,"nodeType":"347","messageId":"348","endLine":70,"endColumn":47},{"ruleId":"345","severity":1,"message":"397","line":70,"column":56,"nodeType":"347","messageId":"348","endLine":70,"endColumn":67},{"ruleId":"345","severity":1,"message":"398","line":81,"column":43,"nodeType":"347","messageId":"348","endLine":81,"endColumn":56},{"ruleId":"345","severity":1,"message":"399","line":81,"column":64,"nodeType":"347","messageId":"348","endLine":81,"endColumn":74},{"ruleId":"345","severity":1,"message":"400","line":81,"column":82,"nodeType":"347","messageId":"348","endLine":81,"endColumn":93},{"ruleId":"401","severity":1,"message":"402","line":111,"column":6,"nodeType":"403","endLine":111,"endColumn":15,"suggestions":"404"},{"ruleId":"345","severity":1,"message":"405","line":3,"column":8,"nodeType":"347","messageId":"348","endLine":3,"endColumn":16},{"ruleId":"345","severity":1,"message":"406","line":4,"column":8,"nodeType":"347","messageId":"348","endLine":4,"endColumn":11},{"ruleId":"345","severity":1,"message":"407","line":5,"column":8,"nodeType":"347","messageId":"348","endLine":5,"endColumn":13},{"ruleId":"345","severity":1,"message":"346","line":1,"column":26,"nodeType":"347","messageId":"348","endLine":1,"endColumn":35},{"ruleId":"345","severity":1,"message":"408","line":2,"column":10,"nodeType":"347","messageId":"348","endLine":2,"endColumn":13},{"ruleId":"345","severity":1,"message":"370","line":2,"column":21,"nodeType":"347","messageId":"348","endLine":2,"endColumn":26},{"ruleId":"345","severity":1,"message":"358","line":2,"column":28,"nodeType":"347","messageId":"348","endLine":2,"endColumn":34},{"ruleId":"345","severity":1,"message":"409","line":32,"column":11,"nodeType":"347","messageId":"348","endLine":32,"endColumn":24},{"ruleId":"351","severity":1,"message":"384","line":52,"column":19,"nodeType":"353","messageId":"354","endLine":52,"endColumn":21},{"ruleId":"351","severity":1,"message":"384","line":60,"column":28,"nodeType":"353","messageId":"354","endLine":60,"endColumn":30},{"ruleId":"345","severity":1,"message":"410","line":72,"column":15,"nodeType":"347","messageId":"348","endLine":72,"endColumn":17},{"ruleId":"345","severity":1,"message":"349","line":2,"column":9,"nodeType":"347","messageId":"348","endLine":2,"endColumn":13},{"ruleId":"345","severity":1,"message":"358","line":3,"column":27,"nodeType":"347","messageId":"348","endLine":3,"endColumn":33},{"ruleId":"345","severity":1,"message":"411","line":35,"column":10,"nodeType":"347","messageId":"348","endLine":35,"endColumn":25},{"ruleId":"345","severity":1,"message":"412","line":35,"column":27,"nodeType":"347","messageId":"348","endLine":35,"endColumn":45},{"ruleId":"345","severity":1,"message":"413","line":40,"column":10,"nodeType":"347","messageId":"348","endLine":40,"endColumn":17},{"ruleId":"351","severity":1,"message":"352","line":47,"column":20,"nodeType":"353","messageId":"354","endLine":47,"endColumn":22},{"ruleId":"345","severity":1,"message":"414","line":72,"column":18,"nodeType":"347","messageId":"348","endLine":72,"endColumn":31},{"ruleId":"345","severity":1,"message":"415","line":72,"column":40,"nodeType":"347","messageId":"348","endLine":72,"endColumn":51},{"ruleId":"351","severity":1,"message":"352","line":82,"column":22,"nodeType":"353","messageId":"354","endLine":82,"endColumn":24},{"ruleId":"345","severity":1,"message":"355","line":1,"column":17,"nodeType":"347","messageId":"348","endLine":1,"endColumn":25},{"ruleId":"345","severity":1,"message":"346","line":1,"column":27,"nodeType":"347","messageId":"348","endLine":1,"endColumn":36},{"ruleId":"345","severity":1,"message":"416","line":2,"column":16,"nodeType":"347","messageId":"348","endLine":2,"endColumn":27},{"ruleId":"345","severity":1,"message":"355","line":1,"column":17,"nodeType":"347","messageId":"348","endLine":1,"endColumn":25},{"ruleId":"345","severity":1,"message":"366","line":1,"column":27,"nodeType":"347","messageId":"348","endLine":1,"endColumn":37},{"ruleId":"345","severity":1,"message":"393","line":2,"column":8,"nodeType":"347","messageId":"348","endLine":2,"endColumn":11},{"ruleId":"345","severity":1,"message":"367","line":3,"column":10,"nodeType":"347","messageId":"348","endLine":3,"endColumn":18},{"ruleId":"345","severity":1,"message":"368","line":3,"column":20,"nodeType":"347","messageId":"348","endLine":3,"endColumn":32},{"ruleId":"345","severity":1,"message":"417","line":4,"column":10,"nodeType":"347","messageId":"348","endLine":4,"endColumn":20},{"ruleId":"345","severity":1,"message":"360","line":5,"column":10,"nodeType":"347","messageId":"348","endLine":5,"endColumn":14},{"ruleId":"345","severity":1,"message":"418","line":5,"column":16,"nodeType":"347","messageId":"348","endLine":5,"endColumn":31},{"ruleId":"345","severity":1,"message":"369","line":5,"column":33,"nodeType":"347","messageId":"348","endLine":5,"endColumn":43},{"ruleId":"345","severity":1,"message":"357","line":6,"column":17,"nodeType":"347","messageId":"348","endLine":6,"endColumn":21},{"ruleId":"345","severity":1,"message":"370","line":6,"column":31,"nodeType":"347","messageId":"348","endLine":6,"endColumn":36},{"ruleId":"345","severity":1,"message":"358","line":2,"column":29,"nodeType":"347","messageId":"348","endLine":2,"endColumn":35},{"ruleId":"401","severity":1,"message":"419","line":36,"column":6,"nodeType":"403","endLine":36,"endColumn":20,"suggestions":"420"},{"ruleId":"345","severity":1,"message":"349","line":2,"column":10,"nodeType":"347","messageId":"348","endLine":2,"endColumn":14},{"ruleId":"345","severity":1,"message":"358","line":3,"column":10,"nodeType":"347","messageId":"348","endLine":3,"endColumn":16},{"ruleId":"345","severity":1,"message":"421","line":2,"column":8,"nodeType":"347","messageId":"348","endLine":2,"endColumn":13},{"ruleId":"345","severity":1,"message":"358","line":3,"column":8,"nodeType":"347","messageId":"348","endLine":3,"endColumn":14},{"ruleId":"345","severity":1,"message":"349","line":4,"column":10,"nodeType":"347","messageId":"348","endLine":4,"endColumn":14},{"ruleId":"345","severity":1,"message":"355","line":1,"column":17,"nodeType":"347","messageId":"348","endLine":1,"endColumn":25},{"ruleId":"345","severity":1,"message":"346","line":1,"column":27,"nodeType":"347","messageId":"348","endLine":1,"endColumn":36},{"ruleId":"345","severity":1,"message":"422","line":30,"column":7,"nodeType":"347","messageId":"348","endLine":30,"endColumn":64},{"ruleId":"345","severity":1,"message":"366","line":1,"column":27,"nodeType":"347","messageId":"348","endLine":1,"endColumn":37},{"ruleId":"345","severity":1,"message":"367","line":4,"column":10,"nodeType":"347","messageId":"348","endLine":4,"endColumn":18},{"ruleId":"345","severity":1,"message":"368","line":4,"column":20,"nodeType":"347","messageId":"348","endLine":4,"endColumn":32},{"ruleId":"345","severity":1,"message":"359","line":7,"column":10,"nodeType":"347","messageId":"348","endLine":7,"endColumn":15},{"ruleId":"345","severity":1,"message":"423","line":37,"column":30,"nodeType":"347","messageId":"348","endLine":37,"endColumn":34},{"ruleId":"345","severity":1,"message":"361","line":37,"column":36,"nodeType":"347","messageId":"348","endLine":37,"endColumn":41},{"ruleId":"363","severity":1,"message":"364","line":121,"column":41,"nodeType":"365","endLine":121,"endColumn":53},{"ruleId":"363","severity":1,"message":"364","line":122,"column":41,"nodeType":"365","endLine":122,"endColumn":53},{"ruleId":"363","severity":1,"message":"364","line":123,"column":41,"nodeType":"365","endLine":123,"endColumn":53},{"ruleId":"345","severity":1,"message":"359","line":4,"column":10,"nodeType":"347","messageId":"348","endLine":4,"endColumn":15},{"ruleId":"345","severity":1,"message":"357","line":4,"column":17,"nodeType":"347","messageId":"348","endLine":4,"endColumn":21},{"ruleId":"345","severity":1,"message":"370","line":4,"column":23,"nodeType":"347","messageId":"348","endLine":4,"endColumn":28},{"ruleId":"345","severity":1,"message":"349","line":5,"column":10,"nodeType":"347","messageId":"348","endLine":5,"endColumn":14},{"ruleId":"345","severity":1,"message":"360","line":7,"column":10,"nodeType":"347","messageId":"348","endLine":7,"endColumn":14},{"ruleId":"351","severity":1,"message":"352","line":56,"column":64,"nodeType":"353","messageId":"354","endLine":56,"endColumn":66},{"ruleId":"351","severity":1,"message":"352","line":60,"column":43,"nodeType":"353","messageId":"354","endLine":60,"endColumn":45},{"ruleId":"401","severity":1,"message":"424","line":72,"column":6,"nodeType":"403","endLine":72,"endColumn":19,"suggestions":"425"},{"ruleId":"345","severity":1,"message":"359","line":4,"column":10,"nodeType":"347","messageId":"348","endLine":4,"endColumn":15},{"ruleId":"345","severity":1,"message":"349","line":5,"column":10,"nodeType":"347","messageId":"348","endLine":5,"endColumn":14},{"ruleId":"345","severity":1,"message":"360","line":7,"column":10,"nodeType":"347","messageId":"348","endLine":7,"endColumn":14},{"ruleId":"345","severity":1,"message":"426","line":8,"column":10,"nodeType":"347","messageId":"348","endLine":8,"endColumn":18},{"ruleId":"345","severity":1,"message":"371","line":41,"column":9,"nodeType":"347","messageId":"348","endLine":41,"endColumn":16},{"ruleId":"345","severity":1,"message":"362","line":49,"column":10,"nodeType":"347","messageId":"348","endLine":49,"endColumn":19},{"ruleId":"351","severity":1,"message":"352","line":55,"column":62,"nodeType":"353","messageId":"354","endLine":55,"endColumn":64},{"ruleId":"345","severity":1,"message":"361","line":57,"column":43,"nodeType":"347","messageId":"348","endLine":57,"endColumn":48},{"ruleId":"345","severity":1,"message":"427","line":61,"column":40,"nodeType":"347","messageId":"348","endLine":61,"endColumn":53},{"ruleId":"345","severity":1,"message":"428","line":61,"column":61,"nodeType":"347","messageId":"348","endLine":61,"endColumn":67},{"ruleId":"345","severity":1,"message":"429","line":61,"column":76,"nodeType":"347","messageId":"348","endLine":61,"endColumn":87},{"ruleId":"345","severity":1,"message":"423","line":68,"column":15,"nodeType":"347","messageId":"348","endLine":68,"endColumn":19},{"ruleId":"351","severity":1,"message":"352","line":124,"column":14,"nodeType":"353","messageId":"354","endLine":124,"endColumn":16},{"ruleId":"351","severity":1,"message":"352","line":135,"column":11,"nodeType":"353","messageId":"354","endLine":135,"endColumn":13},{"ruleId":"345","severity":1,"message":"359","line":4,"column":10,"nodeType":"347","messageId":"348","endLine":4,"endColumn":15},{"ruleId":"345","severity":1,"message":"349","line":5,"column":10,"nodeType":"347","messageId":"348","endLine":5,"endColumn":14},{"ruleId":"345","severity":1,"message":"360","line":7,"column":10,"nodeType":"347","messageId":"348","endLine":7,"endColumn":14},{"ruleId":"345","severity":1,"message":"369","line":7,"column":33,"nodeType":"347","messageId":"348","endLine":7,"endColumn":43},{"ruleId":"345","severity":1,"message":"430","line":21,"column":10,"nodeType":"347","messageId":"348","endLine":21,"endColumn":22},{"ruleId":"345","severity":1,"message":"371","line":24,"column":9,"nodeType":"347","messageId":"348","endLine":24,"endColumn":16},{"ruleId":"345","severity":1,"message":"372","line":25,"column":9,"nodeType":"347","messageId":"348","endLine":25,"endColumn":17},{"ruleId":"345","severity":1,"message":"431","line":27,"column":10,"nodeType":"347","messageId":"348","endLine":27,"endColumn":25},{"ruleId":"345","severity":1,"message":"432","line":27,"column":38,"nodeType":"347","messageId":"348","endLine":27,"endColumn":60},{"ruleId":"345","severity":1,"message":"433","line":27,"column":62,"nodeType":"347","messageId":"348","endLine":27,"endColumn":81},{"ruleId":"345","severity":1,"message":"434","line":27,"column":90,"nodeType":"347","messageId":"348","endLine":27,"endColumn":110},{"ruleId":"345","severity":1,"message":"361","line":31,"column":48,"nodeType":"347","messageId":"348","endLine":31,"endColumn":53},{"ruleId":"345","severity":1,"message":"423","line":41,"column":17,"nodeType":"347","messageId":"348","endLine":41,"endColumn":21},{"ruleId":"345","severity":1,"message":"435","line":54,"column":9,"nodeType":"347","messageId":"348","endLine":54,"endColumn":22},"no-native-reassign",["436"],"no-negated-in-lhs",["437"],"@typescript-eslint/no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'Link' is defined but never used.","'About' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'useState' is defined but never used.","'useCallback' is defined but never used.","'Form' is defined but never used.","'Button' is defined but never used.","'Modal' is defined but never used.","'User' is defined but never used.","'error' is assigned a value but never used.","'validPass' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'useContext' is defined but never used.","'useQuery' is defined but never used.","'useLazyQuery' is defined but never used.","'USER_LOGIN' is defined but never used.","'Alert' is defined but never used.","'history' is assigned a value but never used.","'dispatch' is assigned a value but never used.","'onHide' is assigned a value but never used.","'USER_INIT' is defined but never used.","'Login' is defined but never used.","'Register' is defined but never used.","'showSignIn' is assigned a value but never used.","'showRegister' is assigned a value but never used.","'handleSignInClose' is assigned a value but never used.","'handleSignInShow' is assigned a value but never used.","'handleRegisterClose' is assigned a value but never used.","'handleRegisterShow' is assigned a value but never used.","'Navbar' is defined but never used.","Expected '!==' and instead saw '!='.","'userRefetch' is assigned a value but never used.","'userLoading' is assigned a value but never used.","'addMutaionLoading' is assigned a value but never used.","'addMutationData' is assigned a value but never used.","'addMutationError' is assigned a value but never used.","'removeMutaionLoading' is assigned a value but never used.","'removeMutationData' is assigned a value but never used.","'removeMutationError' is assigned a value but never used.","'gql' is defined but never used.","'_' is defined but never used.","'createLoading' is assigned a value but never used.","'createData' is assigned a value but never used.","'createError' is assigned a value but never used.","'updateLoading' is assigned a value but never used.","'updateData' is assigned a value but never used.","'updateError' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useCallback has missing dependencies: 'createProjectMutation' and 'updateProjectMutation'. Either include them or remove the dependency array.","ArrayExpression",["438"],"'Dropdown' is defined but never used.","'Nav' is defined but never used.","'Badge' is defined but never used.","'Col' is defined but never used.","'onFieldChange' is assigned a value but never used.","'o2' is assigned a value but never used.","'showDeleteModal' is assigned a value but never used.","'setShowDeleteModal' is assigned a value but never used.","'loading' is assigned a value but never used.","'deleteLoading' is assigned a value but never used.","'deleteError' is assigned a value but never used.","'FormControl' is defined but never used.","'useHistory' is defined but never used.","'useUserDispatch' is defined but never used.","React Hook useEffect has a missing dependency: 'name'. Either include it or remove the dependency array.",["439"],"'Typed' is defined but never used.","'GraphiqlLink' is assigned a value but never used.","'data' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'onVerifyUser'. Either include it or remove the dependency array.",["440"],"'userInfo' is defined but never used.","'resendLoading' is assigned a value but never used.","'resend' is assigned a value but never used.","'resendError' is assigned a value but never used.","'invalidEmail' is assigned a value but never used.","'checkResetEmail' is assigned a value but never used.","'loadingCheckResetEmail' is assigned a value but never used.","'checkResetEmailData' is assigned a value but never used.","'checkResetEmailError' is assigned a value but never used.","'onEmailChange' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"441","fix":"442"},{"desc":"443","fix":"444"},{"desc":"445","fix":"446"},"Update the dependencies array to be: [createProjectMutation, localId, updateProjectMutation]",{"range":"447","text":"448"},"Update the dependencies array to be: [field, model, name]",{"range":"449","text":"450"},"Update the dependencies array to be: [onVerifyUser, verifyToken]",{"range":"451","text":"452"},[3125,3134],"[createProjectMutation, localId, updateProjectMutation]",[999,1013],"[field, model, name]",[1943,1956],"[onVerifyUser, verifyToken]"]