[{"/Users/milanmedlik/projects/qlgraph/frontend/src/index.tsx":"1","/Users/milanmedlik/projects/qlgraph/frontend/src/serviceWorker.ts":"2","/Users/milanmedlik/projects/qlgraph/frontend/src/App.tsx":"3","/Users/milanmedlik/projects/qlgraph/frontend/src/common/apolloClient.ts":"4","/Users/milanmedlik/projects/qlgraph/frontend/src/contexts/userContext.tsx":"5","/Users/milanmedlik/projects/qlgraph/frontend/src/pages/projects/list.tsx":"6","/Users/milanmedlik/projects/qlgraph/frontend/src/pages/user-roles/edit.tsx":"7","/Users/milanmedlik/projects/qlgraph/frontend/src/pages/user-roles/list.tsx":"8","/Users/milanmedlik/projects/qlgraph/frontend/src/pages/users/list.tsx":"9","/Users/milanmedlik/projects/qlgraph/frontend/src/pages/projects/edit.tsx":"10","/Users/milanmedlik/projects/qlgraph/frontend/src/components/header/header.tsx":"11","/Users/milanmedlik/projects/qlgraph/frontend/src/components/header/user.tsx":"12","/Users/milanmedlik/projects/qlgraph/frontend/src/components/list/filtered-list.tsx":"13","/Users/milanmedlik/projects/qlgraph/frontend/src/components/list/connect-base.tsx":"14","/Users/milanmedlik/projects/qlgraph/frontend/src/components/editor/edit.tsx":"15","/Users/milanmedlik/projects/qlgraph/frontend/src/pages/login/Register.tsx":"16","/Users/milanmedlik/projects/qlgraph/frontend/src/pages/login/SignIn.tsx":"17","/Users/milanmedlik/projects/qlgraph/frontend/src/pages/projects/defaultSchema.ts":"18","/Users/milanmedlik/projects/qlgraph/frontend/src/components/list/filter-item.tsx":"19","/Users/milanmedlik/projects/qlgraph/frontend/src/components/list/table.tsx":"20","/Users/milanmedlik/projects/qlgraph/frontend/src/components/editor/form.tsx":"21","/Users/milanmedlik/projects/qlgraph/frontend/src/components/common/unauthorized.tsx":"22","/Users/milanmedlik/projects/qlgraph/frontend/src/components/common/loading.tsx":"23","/Users/milanmedlik/projects/qlgraph/frontend/src/components/common/DeleteModal.tsx":"24","/Users/milanmedlik/projects/qlgraph/frontend/src/components/editor/control.tsx":"25","/Users/milanmedlik/projects/qlgraph/frontend/src/components/list/row.tsx":"26","/Users/milanmedlik/projects/qlgraph/frontend/src/components/list/row-item.tsx":"27","/Users/milanmedlik/projects/qlgraph/frontend/src/pages/projects/GraphQLPlayground.tsx":"28"},{"size":504,"mtime":1584997710194,"results":"29","hashOfConfig":"30"},{"size":5295,"mtime":1584988810929,"results":"31","hashOfConfig":"30"},{"size":3095,"mtime":1607780539667,"results":"32","hashOfConfig":"30"},{"size":1384,"mtime":1607767854587,"results":"33","hashOfConfig":"30"},{"size":2561,"mtime":1585236052082,"results":"34","hashOfConfig":"30"},{"size":1384,"mtime":1607770569863,"results":"35","hashOfConfig":"30"},{"size":929,"mtime":1586874508416,"results":"36","hashOfConfig":"30"},{"size":991,"mtime":1586591576567,"results":"37","hashOfConfig":"30"},{"size":1924,"mtime":1588081542638,"results":"38","hashOfConfig":"30"},{"size":1404,"mtime":1588099107131,"results":"39","hashOfConfig":"30"},{"size":1479,"mtime":1595770677104,"results":"40","hashOfConfig":"30"},{"size":1392,"mtime":1586591280972,"results":"41","hashOfConfig":"30"},{"size":3161,"mtime":1586876770135,"results":"42","hashOfConfig":"30"},{"size":3614,"mtime":1588081613601,"results":"43","hashOfConfig":"30"},{"size":3407,"mtime":1588095839459,"results":"44","hashOfConfig":"30"},{"size":4670,"mtime":1585315212564,"results":"45","hashOfConfig":"30"},{"size":3683,"mtime":1585236116664,"results":"46","hashOfConfig":"30"},{"size":1158,"mtime":1585344753113,"results":"47","hashOfConfig":"30"},{"size":3328,"mtime":1586588427305,"results":"48","hashOfConfig":"30"},{"size":4211,"mtime":1586877491321,"results":"49","hashOfConfig":"30"},{"size":746,"mtime":1588087178523,"results":"50","hashOfConfig":"30"},{"size":226,"mtime":1585645675492,"results":"51","hashOfConfig":"30"},{"size":144,"mtime":1585645669465,"results":"52","hashOfConfig":"30"},{"size":1875,"mtime":1585734513657,"results":"53","hashOfConfig":"30"},{"size":1733,"mtime":1588099094893,"results":"54","hashOfConfig":"30"},{"size":932,"mtime":1586876822545,"results":"55","hashOfConfig":"30"},{"size":1325,"mtime":1586898749866,"results":"56","hashOfConfig":"30"},{"size":1116,"mtime":1607780508770,"results":"57","hashOfConfig":"30"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},"tsej14",{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"60"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"60"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"60"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"60"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"60"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"60"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"60"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"60"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"60"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"60"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"60"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"60"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"60"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"60"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"60"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"60"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"60"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"60"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/milanmedlik/projects/qlgraph/frontend/src/index.tsx",[],["133","134"],"/Users/milanmedlik/projects/qlgraph/frontend/src/serviceWorker.ts",[],"/Users/milanmedlik/projects/qlgraph/frontend/src/App.tsx",["135","136"],"/Users/milanmedlik/projects/qlgraph/frontend/src/common/apolloClient.ts",["137"],"import { ApolloClient } from 'apollo-client';\nimport { HttpLink} from 'apollo-link-http';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { ApolloLink, concat } from 'apollo-link';\nimport { setContext } from 'apollo-link-context';\nimport { onError } from \"apollo-link-error\";\n\nconst authLink = setContext((_, { headers }) => {\n  // get the authentication token from local storage if it exists\n  const token = localStorage.getItem('user.token');\n  // return the headers to the context so httpLink can read them\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : \"\",\n    }\n  }\n});\n\n\nconst errroLink = onError(({ graphQLErrors, networkError }) => {\n  if (graphQLErrors)\n    graphQLErrors.map(({ message, locations, path }) =>\n      console.log(\n        `[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`,\n      ),\n    );\n\n  if (networkError) console.log(`[Network error]: ${networkError}`);\n});\n\nconst link = new HttpLink({ uri: `${process.env.REACT_APP_HOST}/graphql` });\n\nexport const apolloClient = new ApolloClient({\n  link: ApolloLink.from([authLink, errroLink, link]),\n  cache: new InMemoryCache(),\n  defaultOptions: {\n    watchQuery: {\n      errorPolicy: 'none'\n    },\n    query: {\n      errorPolicy: 'none'\n    },\n    mutate: {\n      errorPolicy: 'all'\n    }\n  }\n});\n\n\nexport default apolloClient","/Users/milanmedlik/projects/qlgraph/frontend/src/contexts/userContext.tsx",[],"/Users/milanmedlik/projects/qlgraph/frontend/src/pages/projects/list.tsx",["138","139"],"import React, { useState, useEffect } from \"react\";\nimport FilteredList from \"../../components/list/filtered-list\";\nimport gql from 'graphql-tag';\nimport { Link } from \"react-router-dom\";\n\nconst USER_LIST_QUERY = gql`\n  query allProjects($filter: ProjectFilter){ allProjects(filter: $filter) {\n      id\n      name,\n      models\n    }}\n`;\n\nconst ADMIN_LIST_QUERY = gql`\n  query allProjects($filter: ProjectFilter){ allProjects(filter: $filter) {\n      id\n      name,\n      models,\n      user {\n          id,\n          email\n      }\n    }}\n`;\n\nconst DELETE_MUTATION = gql`\n  mutation deleteProject($id: ID!) {\n    deleteProject(id: $id) {\n      id\n    }\n  }\n`;\n\nconst GraphiqlLink: React.FC<{value:any, names?:any, item:any}> = ({value,names, item}) => {\n  return <Link to={`/user/projects/${item.id}/graphiql`}>graphiql</Link>\n}\n\nexport const ProjectList: React.FC<{userId?: string, adminMode?: boolean}> = ({userId, adminMode=false}) => {\n    return (\n        <div>\n            <FilteredList \n                name={'Projects'}\n                fields={[\n                  'name', \n                  'models', \n                  {'name': 'id', 'title':'', component: GraphiqlLink}]}\n                userId={userId} \n                adminMode={adminMode}\n                queries={{USER_LIST_QUERY, ADMIN_LIST_QUERY, DELETE_MUTATION}} />\n        </div>\n    )\n}\n\nexport default ProjectList","/Users/milanmedlik/projects/qlgraph/frontend/src/pages/user-roles/edit.tsx",["140","141","142"],"import React, { useState, useEffect, useCallback } from \"react\";\nimport * as _ from 'lodash'\nimport gql from \"graphql-tag\";\n\nimport BaseEdit from \"../../components/editor/edit\"\n\n\nconst CREATE_MUTATION = gql`\n  mutation createUserRole($role: String!) {\n    createUserRole(role: $role) {\n      id\n      role\n    }\n  }\n`;\n\nconst UPDATE_MUTATION = gql`\n  mutation updateUserRole($id:ID!, $role: String!) {\n    updateUserRole(id: $id, role: $role) {\n      id\n      role\n    }\n  }\n`;\n\nconst QUERY = gql`\n  query userRole($id:ID){ UserRole(id:$id) {\n      id,\n      role,\n    }}\n`;\n\nexport const UserRoleEdit = (data:any) => {\n  const id = _.get(data, 'match.params.id')\n  \n\n  return (\n    <>\n      <BaseEdit \n        id={id} \n        name={'UserRole'}\n        fields={['role']}\n        query={{\n            CREATE_MUTATION,\n            UPDATE_MUTATION,\n            QUERY\n        }}\n      />\n    </>\n  );\n};\n\nexport default UserRoleEdit","/Users/milanmedlik/projects/qlgraph/frontend/src/pages/user-roles/list.tsx",["143","144"],"import React, { useState, useEffect } from \"react\";\nimport FilteredList from \"../../components/list/filtered-list\";\nimport gql from 'graphql-tag';\n\nconst USER_LIST_QUERY = gql`\n  query allUsers($filter: UserFilter){ allUsers(filter: $filter) {\n      id\n      name,\n      models\n    }}\n`;\n\nconst ADMIN_LIST_QUERY = gql`\n  query allUserRoles($filter: UserRoleFilter) {\n  allUserRoles(filter: $filter) {\n      id,\n      role\n    }\n  }\n`;\n\nconst DELETE_MUTATION = gql`\n  mutation deleteUserRole($id: ID!) {\n    deleteUserRole(id: $id) {\n      id\n    }\n  }\n`;\n\n\nexport const UserRoleList: React.FC<{userId?: string, adminMode?: boolean}> = ({userId, adminMode=false}) => {\n    return (\n        <div>\n            <FilteredList \n                name={'Roles'}\n                fields={['role']}\n                userId={userId} \n                adminMode={adminMode}\n                queries={{USER_LIST_QUERY, ADMIN_LIST_QUERY, DELETE_MUTATION}} />\n        </div>\n    )\n}\n\nexport default UserRoleList","/Users/milanmedlik/projects/qlgraph/frontend/src/pages/users/list.tsx",[],"/Users/milanmedlik/projects/qlgraph/frontend/src/pages/projects/edit.tsx",["145","146","147"],"import React, { useState, useEffect, useCallback } from \"react\";\nimport * as _ from 'lodash'\nimport gql from \"graphql-tag\";\n\nimport BaseEdit from \"../../components/editor/edit\"\nimport { Form } from \"react-bootstrap\";\nimport { TControl } from \"../../components/editor/control\";\n\n\nconst CREATE_MUTATION = gql`\n  mutation createProject($userId: ID!, $name: String!, $models: String!) {\n    createProject(userId: $userId, name: $name, models: $models) {\n      id\n      name\n      models\n    }\n  }\n`;\n\nconst UPDATE_MUTATION = gql`\n  mutation updateProject($id: ID!, $name: String!, $models: String!) {\n    updateProject(id: $id, name: $name, models: $models) {\n      id\n      name\n      models\n    }\n  }\n`;\n\nconst QUERY = gql`\n  query project($id:ID){ Project(id:$id) {\n      id,\n      name,\n      models\n    }}\n`;\n\nconst ProjectSchemaControl:React.FC<TControl> = ({onChange, value}) => (\n    <Form.Control as=\"textarea\" rows=\"30\" {...{onChange, value}} />\n)\n\nexport const ProjectEdit = (data:any) => {\n  const projectId = _.get(data, 'match.params.projectId')\n  \n\n  return (\n    <>\n      <BaseEdit \n        id={projectId} \n        name={'Project'}\n        fields={['name', {\n          name:'models',\n          label: 'Schema',\n          control: ProjectSchemaControl\n        }]}\n        query={{\n            CREATE_MUTATION,\n            UPDATE_MUTATION,\n            QUERY\n        }}\n      />\n    </>\n  );\n};\n","/Users/milanmedlik/projects/qlgraph/frontend/src/components/header/header.tsx",["148","149","150","151","152"],"import React, { useEffect, useState } from 'react'\nimport { Link } from 'react-router-dom';\nimport { useUserState, useUserDispatch, USER_INIT, USER_LOGOUT } from '../../contexts/userContext';\nimport UserHeaderComponent from './user'\nimport Form from 'react-bootstrap/Form'\nimport Button from 'react-bootstrap/Button'\nimport Modal from 'react-bootstrap/Modal'\nimport SignIn from '../../pages/login/SignIn';\nimport Register from '../../pages/login/Register';\n\nexport const Header = () => {\n  const user = useUserState()\n  const userDispatch = useUserDispatch()\n\n  const [showSignIn, setShowSignIn] = useState<boolean>(false)\n  const [showRegister, setShowRegister] = useState(true)\n  \n  const handleSignInClose = () => setShowSignIn(false)\n  const handleSignInShow = () => setShowSignIn(true)\n\n  const handleRegisterClose = () => setShowRegister(false)\n  const handleRegisterShow = () => setShowRegister(true)\n\n  const onLogout = () => {\n    userDispatch({ type: USER_LOGOUT })\n  }\n\n  if (user.token) {\n    return <UserHeaderComponent user={user} onLogout={onLogout} />\n  }\n\n  return (\n    <div>\n\n      <span onClick={handleSignInShow}>SignIn</span> | <span onClick={handleRegisterShow}>Register</span> |\n      <Link to=\"/\">Home</Link> |\n      <Link to=\"/pricing\">Pricing</Link>\n\n      <SignIn show={showSignIn} onHide={handleSignInClose}/>\n      <Register show={showRegister} onHide={handleRegisterClose}/>\n\n      <span>{process.env.PROTECTQL_HOST}</span>\n\n      \n    </div>\n  )\n}","/Users/milanmedlik/projects/qlgraph/frontend/src/components/header/user.tsx",["153","154"],"import React from 'react'\nimport { Link } from 'react-router-dom'\nimport Dropdown from 'react-bootstrap/Dropdown'\nimport Nav from 'react-bootstrap/Nav'\nimport Badge from 'react-bootstrap/Badge'\n\nconst UserHeader = ({user, onLogout}:any) => {\n\n    return (\n        <div>\n        <Nav>\n            <Nav.Item>\n            <Dropdown>\n            <Dropdown.Toggle variant=\"secondary\" size=\"sm\" id=\"dropdown-basic\">\n            User Menu\n            </Dropdown.Toggle>\n\n            <Dropdown.Menu>\n            <Dropdown.Item href=\"/user/projects\">All Projects</Dropdown.Item>\n            <Dropdown.Divider />\n            <Dropdown.Item href=\"#/action-2\">User</Dropdown.Item>\n            <Dropdown.Item href=\"#/action-3\" onClick={onLogout}>Logout</Dropdown.Item>\n            </Dropdown.Menu>\n        </Dropdown>\n        </Nav.Item>\n        \n        <Nav.Item>\n        \n        <Dropdown>\n            <Dropdown.Toggle variant=\"secondary\" size=\"sm\" id=\"dropdown-basic\">\n            Admin\n            </Dropdown.Toggle>\n\n            <Dropdown.Menu>\n            <Dropdown.Item href=\"/admin/projects\">All Projects</Dropdown.Item>\n            <Dropdown.Item href=\"/admin/users\">All Users</Dropdown.Item>\n            <Dropdown.Item href=\"/admin/roles\">All Roles</Dropdown.Item>\n            </Dropdown.Menu>\n        </Dropdown>\n        </Nav.Item>\n\n    </Nav>\n\n    </div>\n\n    )\n}\n\nexport default UserHeader","/Users/milanmedlik/projects/qlgraph/frontend/src/components/list/filtered-list.tsx",["155","156","157"],"import React, {useState, useEffect, useCallback} from 'react'\nimport {Link, useHistory} from 'react-router-dom'\nimport Table, {ITableQueries} from './table'\nimport FilterItem from './filter-item'\nimport {Navbar, Button} from 'react-bootstrap'\nimport './filtered-list.scss'\nimport { IFilteredField } from './row-item'\n\n\n\nexport interface IProjectFilterList {\n    name: string,\n    userId?: string \n    adminMode?: boolean\n    queries: ITableQueries\n    fields: IFilteredField[]\n}\n\nconst createFilter = () => {\n    let obj:any = []\n    obj.name = 'AND'\n    return {AND: obj}\n}\n\nconst addAnd = (node:any, filter:any) => {\n\n    let obj:any = filter\n\n    if(node.name != 'AND'){\n        obj = [obj]\n        obj.name = 'AND'\n    }\n\n    node.push(obj)\n}\n\nconst filterDestructNode = (node: any) => {\n    let filter = ''\n\n    for(const n of node) {\n        if(n.name && n.length > 0) {\n            filter += `,${filterDestructNode(n)}` \n        } else {\n            filter += `,{${n.filter}}`\n        }\n    }\n\n    return `{${node.name}:[${filter.substr(1)}]}`\n}\n\nconst filterDestruct = (filter: any) => {\n    let fo = {\n        filter: '',\n        params: '',\n    }\n\n    fo.filter = filter.AND.length > 0 ? `(filter: ${filterDestructNode(filter.AND)})` : ''\n    fo.params = fo.params.length> 2 ? `(${fo.params.substr(1)})` : ''\n\n    return fo\n}\n\n\nexport const FilteredList:React.FC<IProjectFilterList> = ({name, userId, adminMode=false, queries, fields}) => {\n\n    const [filter, setFilter] = useState(createFilter())\n    const history = useHistory()\n\n    // console.log(filter, listFilter)\n    const createDefaultFilter = (userId? : string) => {\n        const defaultFilter = createFilter()\n        \n        if(userId){\n            addAnd(defaultFilter.AND, {user_every:{id:userId}})\n        }\n        \n        return defaultFilter\n    }\n\n    const processFilter = (filter: any) => {\n        const filterDestructed = filterDestruct(filter)\n        \n        console.log('processFilter', {filter, filterDestructed})\n\n        setFilter(filter)\n    }\n\n    useEffect(()=>{\n        const defaultFilter = createDefaultFilter(userId)\n        processFilter(defaultFilter)\n        \n    }, [userId])\n\n    const onFilterChange = useCallback((f: string | null) => {\n        const defaultFilter = createDefaultFilter(userId)\n        \n        if(f) {\n            addAnd(defaultFilter.AND,f)\n        }\n        \n        processFilter(defaultFilter)\n\n    }, [userId])\n\n    const onCreateNew = () => {\n        history.push('/user/' + name.toLowerCase() + '/create' )\n    }\n\n\n    return (\n        <div>\n            <div className=\"row-head\">\n                <div>\n                <h3>{name}</h3>\n                </div>\n                <FilterItem fields={fields} onChange={onFilterChange} />\n                <div>\n                <Button onClick={onCreateNew}>Create New</Button>\n                </div>\n                \n            </div>\n            <div className=\"row-table\">\n           \n            <Table name={name} filter={filter} queries={queries} adminMode={adminMode} fields={fields} />\n            </div>\n            \n        </div>\n        \n    )\n}\n\nexport default FilteredList","/Users/milanmedlik/projects/qlgraph/frontend/src/components/list/connect-base.tsx",["158","159","160","161","162","163","164","165","166","167"],"import React, { useState, useEffect } from \"react\";\nimport { DropdownButton, Dropdown, Form } from \"react-bootstrap\";\nimport { useQuery, useMutation } from \"@apollo/react-hooks\";\nimport { getDataFromRaw } from \"../../components/editor/edit\";\n\nexport const ConnectBase: React.FC<{value:any, names?:any, gql: any, item: any}> = ({value, names, gql, item}) => {\n    const element = value\n    const name = names.length>1 && names[1]\n    const elementTitle = element.push && element.reduce && names.length > 1 ? (element as any[]).reduce((p, e)=>p + `, ${e[name]}`, '').substr(2) : element\n  \n    const [title, setTitle] = useState(elementTitle)\n    const [data, setData] = useState<any[]>([])\n  \n    const { refetch: userRefetch, loading: userLoading } = useQuery(gql.QUERY, {\n      onError: (e) => {\n        console.log('ConnectBase:onError >>> ', e.message)\n        if(e.message == 'GraphQL error: Unauhorized'){\n          // setUnauthorized(true)\n        } else {\n          // setError(e)\n        }\n      }, onCompleted: (iraw) => {\n        console.log('user: onCompleted', iraw)\n        // setLoading(false)\n  \n        const dataFields = Object.getOwnPropertyNames(iraw)\n        if(dataFields.length > 0 && iraw[dataFields[0]].length > 0){\n          const raw = iraw[dataFields[0]]\n  \n          const final = raw.map((r:any)=>{\n            return {\n              id: r.id,\n              checked: title.indexOf(r[name]) !== -1,\n              label: r[name]\n            }\n          })\n  \n          setData(final)\n        } else {\n          setData([])\n        }\n        \n      },\n    });\n  \n    const [\n      addMutation,\n      { loading: addMutaionLoading, data: addMutationData, error: addMutationError }\n    ] = useMutation(gql.ADD, {\n      errorPolicy: \"none\",\n      onCompleted: (raw: any) => {\n        const data = getDataFromRaw(raw)\n        console.log(\"ADDED\", raw, data.id);\n      },\n      onError: () => {}\n    });\n  \n    const [\n      removeMutation,\n      { loading: removeMutaionLoading, data: removeMutationData, error: removeMutationError }\n    ] = useMutation(gql.REMOVE, {\n      errorPolicy: \"none\",\n      onCompleted: (raw: any) => {\n        const data = getDataFromRaw(raw)\n        console.log(\"REMOVE\", raw, data.id);\n      },\n      onError: () => {}\n    });\n  \n    const onChecked = (value:any) => {\n      const updated = data.map((d:any)=>{\n        if(d.label === value.label) {\n          d.checked = !d.checked\n        }\n        return {...d}\n      })\n  \n      const updateTitle = (updated as any[]).reduce((p, e) => {\n        if(e.checked) return `${p}, ${e.label}`\n        else return p\n      }, '').substr(1)\n  \n      console.log('onChecked:', {updated, value, updateTitle})\n  \n      if(value.checked){\n        addMutation({\n          variables: {\n            id1: value.id,\n            id2: item.id\n          }\n        });\n      } else {\n        removeMutation({\n          variables: {\n            id1: value.id,\n            id2: item.id\n          }\n        });\n      }\n      \n  \n      setData(updated)\n      setTitle(updateTitle)\n    }\n    \n    // if(element.push && element.reduce && names.length > 1) {\n    //   return (<>ahoj: {(element as any[]).reduce((p, e)=>p + e[names[1]], '')}</>)\n    // }\n  \n    return (<DropdownButton id=\"dropdown-basic-button\" title={title}>\n        {data && data.map((d:any)=>(\n        <Dropdown.Item  onClick={(e:any) => onChecked(d)} >\n          <Form.Check \n              type=\"checkbox\" \n              label={d.label} \n              checked={d.checked} />\n        </Dropdown.Item>))\n        }\n      </DropdownButton>)\n  }\n\n  export default ConnectBase","/Users/milanmedlik/projects/qlgraph/frontend/src/components/editor/edit.tsx",["168","169","170","171","172","173","174","175","176","177","178"],"import React, { useState, useEffect, useCallback } from \"react\";\n\nimport { BaseForm, TBaseForm } from \"./form\";\nimport gql from \"graphql-tag\";\nimport { useMutation, useQuery } from \"@apollo/react-hooks\";\nimport { DEFAULT_SCHEMA } from \"../../pages/projects/defaultSchema\";\nimport * as _ from 'lodash'\nimport { Alert } from 'react-bootstrap'\nimport Unauthorized from '../common/unauthorized'\nimport Loading from '../common/loading'\nimport { TField, TControlField } from \"./control\";\n\nexport const getDataFromRaw = (rawData: any) => {\n  const rawName = Object.keys(rawData)[0]\n  return rawData[rawName]\n}\n\nexport type TBaseEdit = Pick<TBaseForm, 'fields'> & {\n  id: string\n  name: string\n  query: any\n}\n\nexport const BaseEdit:React.FC<TBaseEdit> = ({id: externId, query, name, fields}) => {\n  \n\n  const [localId, setLocalId] = useState(externId);\n  const [unauthorized, setUnauthorized] = useState(false);\n\n  const [model, setModel] = useState({\n    name: \"project A\",\n    schema: DEFAULT_SCHEMA\n  });\n\n  const { loading, error } = useQuery(query.QUERY, {\n    variables: {id: externId},\n    skip: !externId,\n    onCompleted: (loadedDataRaw: any) =>{\n      \n      const loadedData = getDataFromRaw(loadedDataRaw)\n      \n      console.log('Edit:QUERY', {externId, loadedDataRaw, loadedData})\n\n      if(loadedData){\n        const np = fields.reduce((o:any, field: TField)=> {\n          const fieldName = (field as TControlField).name ? (field as TControlField).name : field as string\n          o[fieldName] = loadedData[fieldName]\n          return o\n        }, {})\n\n        setModel(np)\n      } else {\n        setUnauthorized(true)\n      }\n    }, onError: (e) => {\n      console.log('onError >>> ', e.message)\n      if(e.message == 'GraphQL error: Unauhorized'){\n        setUnauthorized(true)\n      }\n      setModel({name:'', schema: ''})\n    }\n  });\n\n  const [\n    createProjectMutation,\n    { loading: createLoading, data: createData, error: createError }\n  ] = useMutation(query.CREATE_MUTATION, {\n    errorPolicy: \"none\",\n    onCompleted: (raw: any) => {\n      const data = getDataFromRaw(raw)\n      console.log(\"CREATED\", raw, data.id);\n      setLocalId(data.id);\n    },\n    onError: () => {}\n  });\n\n  const [updateProjectMutation, { loading:updateLoading, data: updateData, error:updateError }] = useMutation(\n    query.UPDATE_MUTATION,\n    {\n      errorPolicy: \"none\",\n      onCompleted: (data: any) => {\n        console.log(\"UPDATED\", data.updateProject.id);\n        setLocalId(data.createProject.id);\n      },\n      onError: () => {}\n    }\n  );\n\n  const onUpdate = useCallback((model: any) => {\n    console.log('onUpdate >>> ', localId, model)\n    if(localId){\n        updateProjectMutation({\n            variables: {\n              id:localId,\n              ...model\n            }\n          });\n    } else {\n        createProjectMutation({\n            variables: {\n              userId: localStorage.getItem(\"user.id\"),\n              ...model\n            }\n          });\n    }\n    \n  }, [localId]);\n\n  if(unauthorized) {\n    return (<Unauthorized where={`${name} edit`} />)\n  }\n\n  if(loading) {\n    return (<Loading what={name}/>)\n  }\n\n  return (\n    <div>\n      <h1>{name} Edit ({externId})</h1>\n      {error && <Alert variant={'danger'}>`${error.message}`</Alert>}\n      <BaseForm model={model} doUpdate={onUpdate} edit={Boolean(localId)} fields={fields} />\n    </div>\n  );\n};\n\nexport default BaseEdit","/Users/milanmedlik/projects/qlgraph/frontend/src/pages/login/Register.tsx",["179","180","181","182"],"import React, { useState } from \"react\";\nimport gql from \"graphql-tag\";\nimport { useMutation } from \"@apollo/react-hooks\";\nimport { Modal, Form, Alert, Button } from \"react-bootstrap\";\nimport { Link } from 'react-router-dom';\nimport { useHistory } from \"react-router-dom\";\nimport { User, useUserDispatch, USER_LOGIN } from '../../contexts/userContext';\n\nconst SIGNIN_MUTATION = gql`\n  mutation signUp($email: String!, $pass: String!) {\n    createUser(email: $email, password: $pass) {\n      id\n      token\n      roles {\n        role\n        id\n      }\n    }\n  }\n`;\n\nexport const Register: React.FC<{ show: boolean; onHide: () => void }> = ({\n  show,\n  onHide: doHide\n}) => {\n  const [email, setEmail] = useState(\"ahoj\");\n  const [pass, setPass] = useState(\"ahoj\");\n  const [copy, setCopy] = useState(\"\");\n\n  const history = useHistory()\n  const dispatch = useUserDispatch()\n\n  const [signIn, { loading, data, error }] = useMutation(SIGNIN_MUTATION, {\n    errorPolicy: \"none\",\n    onCompleted: (data) => {\n      console.log('e,c',data)\n      if(data.createUser){\n        dispatch({\n          type: USER_LOGIN,\n          user: data.createUser as User\n      })\n      onHide()\n      history.push('/dashboard')\n      } else {\n        setInvalidEmail(true)\n      }\n      \n    },\n    onError: () => {\n      console.log('onError',data)\n      setInvalidEmail(true)\n    }\n  });\n\n  const [invalidEmail, setInvalidEmail] = useState(false);\n  \n  const [invalidPass, setInvalidPass] = useState(false);\n  const [validPass, setValidPass] = useState(false);\n\n  const [invalidCopy, setInvalidCopy] = useState(false);\n\n  const onRegister = async () => {\n    if(pass != copy) {\n      setInvalidCopy(true)\n      return \n    }\n\n    signIn({ variables: { email, pass } })\n  };\n\n  const onHide = () => {\n    setPass(\"\");\n    setCopy(\"\");\n    doHide();\n  };\n\n  const onEmailChange = (event: any) => {\n    setEmail(event.target.value);\n    setInvalidEmail(false);\n  };\n\n  const onPasswordChange = (event: any) => {\n    const pass = event.target.value as string\n    const regularExpression = /^(?=.*[0-9])(?=.*[!@#$%^&*])[a-zA-Z0-9!@#$%^&*]{6,16}$/\n    setValidPass(regularExpression.test(pass))\n\n    setPass(pass);\n    setInvalidEmail(false);\n    setInvalidPass(false);\n  };\n\n  const onCopyChange = (event: any) => {\n    const c = event.target.value\n    setCopy(c)\n    setInvalidEmail(false)\n    setInvalidPass(false)\n\n    if(c == pass){\n      setInvalidCopy(false)\n    }\n  };\n\n  return (\n    <div>\n      <Modal show={show} onHide={onHide}>\n        <Modal.Header closeButton>\n          <div>\n            <Modal.Title>SigIn</Modal.Title>\n          </div>\n        </Modal.Header>\n\n        <Modal.Body>\n          {loading && <div>Loading...</div>}\n          <div>\n            {invalidEmail && (\n              <Alert variant={\"danger\"}>Email is probably taken, did you <Link to=\"/forgotten-password\">forgotten password</Link>?</Alert>\n            )}\n            {invalidCopy && (\n              <Alert variant={\"danger\"}>The retyped password is not the same</Alert>\n            )}\n          </div>\n\n          <Form>\n            <Form.Group controlId=\"formBasicEmail\">\n              <Form.Label>Email address</Form.Label>\n              <Form.Control\n                type=\"email\"\n                placeholder=\"Enter email\"\n                onChange={onEmailChange}\n                value={email}\n                isInvalid={invalidEmail}\n              />\n              <Form.Text className=\"text-muted\">\n                We'll never share your email with anyone else.\n              </Form.Text>\n            </Form.Group>\n\n            <Form.Group controlId=\"formBasicPassword\">\n              <Form.Label>Password</Form.Label>\n              <Form.Control\n                type=\"password\"\n                placeholder=\"Password\"\n                onChange={onPasswordChange}\n                value={pass}\n                isInvalid={invalidPass}\n              />\n            </Form.Group>\n\n            <Form.Group controlId=\"formBasicPassword\">\n              <Form.Label>Re-Password</Form.Label>\n              <Form.Control\n                type=\"password\"\n                placeholder=\"Retype Password\"\n                onChange={onCopyChange}\n                value={copy}\n                isInvalid={invalidCopy}\n              />\n            </Form.Group>\n          </Form>\n        </Modal.Body>\n\n        <Modal.Footer>\n          <Button variant=\"primary\" type=\"submit\" onClick={() => onRegister()}>\n            Register\n          </Button>\n          <Button variant=\"secondary\" onClick={onHide}>\n            Close\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    </div>\n  );\n};\n\nexport default Register;\n","/Users/milanmedlik/projects/qlgraph/frontend/src/pages/login/SignIn.tsx",["183","184","185","186"],"import React, { useState, useContext } from 'react'\nimport gql from 'graphql-tag'\nimport { useQuery, useLazyQuery } from '@apollo/react-hooks'\nimport { useHistory } from \"react-router-dom\";\nimport { User, useUserDispatch, USER_LOGIN } from '../../contexts/userContext';\nimport { Modal, Form, Button, Alert } from 'react-bootstrap'\n\nconst LOGIN_QL = gql`\n  query Login($email: String!, $pass: String!) {\n    login(email: $email, password:$pass) {\n      id,\n      token,\n      email,\n      roles {\n        role,\n        id\n      }\n    }\n}\n`;\n\nexport const SignIn: React.FC<{ show: boolean, onHide: () => void }> = ({ show, onHide: doHide }) => {\n    const [email, setEmail] = useState(localStorage.getItem('user.email') as string)\n    const [pass, setPass] = useState('')\n\n    const [invalidEmail, setInvalidEmail] = useState(false)\n    const [invalidPass, setInvalidPass] = useState(false)\n\n    const history = useHistory()\n    const dispatch = useUserDispatch()\n\n    const [login, { loading, data, error }] = useLazyQuery(LOGIN_QL, {\n        onCompleted: (d) => {\n            dispatch({\n                type: USER_LOGIN,\n                user: d.login as User\n            })\n            onHide()\n            history.push('/dashboard')\n        }, onError: (error) => {\n            setInvalidEmail(true)\n            setInvalidPass(true)\n            setPass('')\n        }\n    });\n\n    const onLogin = async () => {\n        login({ variables: { email, pass } })\n    }\n\n    const onEmailChange = (event:any) => {\n        setEmail(event.target.value)\n        setInvalidEmail(false)\n        setInvalidPass(false)\n    }\n\n    const onPasswordChange = (event:any) => {\n        setPass(event.target.value)\n        setInvalidEmail(false)\n        setInvalidPass(false)\n    }\n\n    const onHide = () => {\n        setPass('')\n        setInvalidEmail(false)\n        setInvalidPass(false)\n        doHide()\n    }\n\n    return (\n        <div>\n            <Modal show={show} onHide={onHide}>\n                <Modal.Header closeButton>\n                    <div>\n                        <Modal.Title>SigIn</Modal.Title>\n                    </div>\n                    \n                </Modal.Header>\n\n                <Modal.Body>\n                    {loading && <div>Loading...</div>}\n                    <div>\n                        {invalidPass && <Alert variant={'danger'}>Email or password is not valid</Alert>}\n                    </div>\n\n                    <Form>\n                        <Form.Group controlId=\"formBasicEmail\">\n                            <Form.Label>Email address</Form.Label>\n                            <Form.Control type=\"email\" placeholder=\"Enter email\" onChange={onEmailChange} value={email} isInvalid={invalidEmail}/>\n                            <Form.Text className=\"text-muted\">\n                                We'll never share your email with anyone else.\n                            </Form.Text>\n                        </Form.Group>\n\n                        <Form.Group controlId=\"formBasicPassword\">\n                            <Form.Label>Password</Form.Label>\n                            <Form.Control type=\"password\" placeholder=\"Password\" onChange={onPasswordChange} value={pass} isInvalid={invalidPass} />\n                        </Form.Group>\n                        \n                       \n                    </Form>\n                </Modal.Body>\n\n                <Modal.Footer>\n                    <Button variant=\"primary\" type=\"submit\" onClick={() => onLogin()}>SigIn</Button>\n                    <Button variant=\"secondary\" onClick={onHide}>Close</Button>\n                </Modal.Footer>\n            </Modal>\n\n\n        </div>\n    )\n}\n\nexport default SignIn","/Users/milanmedlik/projects/qlgraph/frontend/src/pages/projects/defaultSchema.ts",[],"/Users/milanmedlik/projects/qlgraph/frontend/src/components/list/filter-item.tsx",["187","188","189","190","191","192"],"import React, {useState, useEffect, useCallback} from 'react'\nimport { Col, Form, Alert, Button, InputGroup, DropdownButton, Dropdown } from \"react-bootstrap\";\nimport './filter-item.scss'\n\nconst basicOptionsName = {\n    contains : 'contains',\n    not_contains : 'not contains',\n    starts_with : 'starts with',\n    not_starts_with : 'not starts with',\n    ends_with : 'ends with',\n    not_ends_with : 'not ends with',\n    isEmpty : 'is empty',\n}\n\ntype basicOptionsNameType = 'contains' | 'not_contains' | 'starts_with' | 'not_starts_with' | 'ends_with' | 'not_ends_with' | 'isEmpty'\n\n\n\nexport interface IFilterItemParam {\n    fields: any[]\n    onChange: (filter: string | null) => void\n}\n\n  \n\nexport const FilterItem: React.FC<IFilterItemParam> = ({fields, onChange}) => {\n    const [fieldSelected, setFieldSelected] = useState(fields[0])\n    const [optionSelected, setOptionSelected] = useState('contains')\n    const [filterText, setFilterText] = useState('')\n    const [filter, setFilter] = useState<string|null>('null')\n\n    const onFieldChange = (field:any) => {\n        console.log('onFieldChange', field)\n        setFieldSelected(field)\n        processFilter(field, optionSelected, filterText)\n    }\n\n    const onOptionChange = (option:any) => {\n        console.log('onOptionChange', option)\n        setOptionSelected(option)\n        processFilter(fieldSelected, option, filterText)\n    }\n\n    const onFilterChange = (e:any) => {\n        const text = e.target.value\n        console.log('onFilterChange', e, text)\n        setFilterText(text)\n        processFilter(fieldSelected, optionSelected, text)\n    }\n\n    const doFilter = useCallback((f: string | null) => {\n        if(filter != f){\n            console.log('useFilter>>>', f)\n            setFilter(f)\n            onChange(f)\n        }\n    }, [filter, onChange, setFilter])\n\n    const processFilter = useCallback((field, option, text) => {\n        if(!text && option != 'isEmpty') {\n            doFilter(null)\n            return\n        }\n\n        const f = {} as any\n        f[`${field}_${option}`] = text\n        doFilter(f)\n\n    }, [doFilter] )\n\n    const gc = (o:any) => {\n        const o2 = o\n        return () => {onFieldChange(o2)}\n    }\n\n    const go = (o:any) => {\n        const o2 = o\n        return () => {onOptionChange(o2);}\n    }\n\n\n    return (\n        <InputGroup className=\"mb-3\">\n            <DropdownButton\n                className=\"field-option\"\n                as={InputGroup.Prepend}\n                variant=\"success\"\n                title={fieldSelected}\n                id=\"input-group-dropdown-1\" >\n                    {fields.map((o)=> (<Dropdown.Item key={o} onClick={gc(o)}>{o}</Dropdown.Item>))}\n            </DropdownButton>\n            <DropdownButton\n                className=\"select-option\"\n                as={InputGroup.Prepend}\n                variant=\"outline-link\"\n                title={basicOptionsName[optionSelected as basicOptionsNameType]}\n                id=\"input-group-dropdown-1\" >\n                    {Object.getOwnPropertyNames(basicOptionsName).map((o)=> (<Dropdown.Item key={o} onClick={go(o)}>{basicOptionsName[o as basicOptionsNameType]}</Dropdown.Item>))}\n            </DropdownButton>\n            <Form.Control value={filterText} onChange={onFilterChange}/>\n        </InputGroup>)\n\n}\n\nexport default FilterItem","/Users/milanmedlik/projects/qlgraph/frontend/src/components/list/table.tsx",["193","194","195","196","197","198","199","200","201"],"import React, {useState} from 'react'\nimport {Link} from 'react-router-dom'\nimport { Table as BTable, Button } from 'react-bootstrap'\n\nimport { useQuery, useMutation } from '@apollo/react-hooks';\nimport { ListRow } from './row';\nimport Loading from '../common/loading';\nimport DeleteModal from '../common/DeleteModal';\nimport Unauthorized from '../common/unauthorized';\nimport { DocumentNode } from 'graphql';\nimport { IFilteredField } from './row-item';\n\nexport interface IFilterWithParams {\n  filter?: string\n  params?: string\n}\n\nexport interface ITableQueries {\n  ADMIN_LIST_QUERY: DocumentNode\n  USER_LIST_QUERY: DocumentNode\n  DELETE_MUTATION: DocumentNode\n}\n\nexport interface IProjectList {\n    userId?: string\n    adminMode?: boolean\n    filter: any\n    queries: ITableQueries\n    fields?: IFilteredField[]\n    name: string\n}\n\nexport const Table : React.FC<IProjectList> = ({filter, name, adminMode = false, queries, fields}) => {\n  const [unauthorized, setUnauthorized] = useState(false)\n  const [showDeleteModal, setShowDeleteModal] = useState(false)\n  const [deleteObject, setDeleteObject] = useState(null)\n  const [showDeleteDialog, setShowDeleteDialog] = useState(false)\n  const [deletingOnDeleteDialog, setDeletingOnDeleteDialog] = useState(false)\n\n  const [loading, setLoading] = useState(true)\n  const [data, setData] = useState<any>([])\n  const [error, setError] = useState()\n\n  const { refetch: userRefetch, loading: userLoading } = useQuery(adminMode? queries.ADMIN_LIST_QUERY : queries.USER_LIST_QUERY, {\n    onError: (e) => {\n      console.log('onError >>> ', e.message)\n      if(e.message == 'GraphQL error: Unauhorized'){\n        setUnauthorized(true)\n      } else {\n        setError(e)\n      }\n    }, onCompleted: (d) => {\n      console.log('user: onCompleted', d)\n      setLoading(false)\n\n      const dataFields = Object.getOwnPropertyNames(d)\n      if(dataFields.length > 0 && d[dataFields[0]].length > 0){\n        setData(d[dataFields[0]])\n      } else {\n        setData([])\n      }\n      \n    },\n    variables: {filter}\n  });\n\n\n  \n\n    const [\n      deleteProjectMutation,\n      { loading: deleteLoading, error: deleteError }\n    ] = useMutation(queries.DELETE_MUTATION, {\n      errorPolicy: \"none\",\n      onCompleted: (data: any) => {\n        console.log(\"DELETE\", data.deleteProject);\n        onHideDidaloDelete()\n        userRefetch()\n      },\n      onError: (e) => {\n        console.log('onError >>> ', e.message)\n        if(e.message == 'GraphQL error: Unauhorized'){\n          setUnauthorized(true)\n        }\n      },\n    });\n\n    const onHideDidaloDelete = () => {\n      setShowDeleteDialog(false)\n      setDeleteObject(null)\n    }\n\n    const onDelete = (obj:any) => {\n      setDeletingOnDeleteDialog(false)\n      setShowDeleteDialog(true)\n      setDeleteObject(obj)\n    }\n\n    const doDelete = (deleteObject: any) => {\n      setDeletingOnDeleteDialog(true)\n      deleteProjectMutation({\n        variables: {\n          id: deleteObject.id\n        }\n      });\n    }\n    \n\n    if(unauthorized) {\n      return (<Unauthorized where={'projects'} />)\n    }\n    if (userLoading) return (<Loading what={'projects'} />);\n\n    return (\n        <div>\n            \n            {error && (<div>{`Error! ${error.message}`}</div>)}\n            \n            <BTable responsive>\n              <thead>\n                <tr>\n                  <th>Id</th>\n                  {fields?.map(f => (f!=='id' && <th>{(f as any).name ? (f as any).name : f}</th>))}\n                  {adminMode && <th>User</th>}\n                  <th></th>\n                </tr>\n              </thead>\n              <tbody>\n              {\n                data.length && data.map((projectItem:any)=>(<ListRow name={name} item={projectItem} onDelete={onDelete} fields={fields} />))\n              }\n              </tbody>\n            \n            </BTable>\n            \n            <DeleteModal \n                  show={showDeleteDialog} \n                  onHide={onHideDidaloDelete}\n                  onDelete={doDelete}\n                  category={'project'}\n                  deleteObject={deleteObject}\n                  deleting={deletingOnDeleteDialog}\n                  />\n        </div>\n    )\n}\n\nexport default Table","/Users/milanmedlik/projects/qlgraph/frontend/src/components/editor/form.tsx",["202","203","204"],"import React, { useState, useEffect } from \"react\";\nimport { Form, FormControl, Button } from \"react-bootstrap\";\n\nimport BaseControl, { TField } from './control'\n\nexport type TBaseForm = {\n  model: any;\n  doUpdate: (model:any) => void;\n  edit?: boolean\n  fields: TField[]\n}\n\nexport const BaseForm: React.FC<TBaseForm> = ({ model, fields, doUpdate, edit = false }) => {\n  \n  const onUpdate = () => {\n      doUpdate(model)\n  }\n\n  const onChange = (field:string, value:any) => {\n    model[field] = value\n  }\n\n  return (\n    <div>\n      <Form>\n        {fields.map((field:any)=>(<BaseControl model={model} field={field} onChange={onChange}/>))}\n        <Button onClick={onUpdate}>{edit ? 'Update' : 'Create'}</Button>\n      </Form>\n    </div>\n  );\n};\n","/Users/milanmedlik/projects/qlgraph/frontend/src/components/common/unauthorized.tsx",[],"/Users/milanmedlik/projects/qlgraph/frontend/src/components/common/loading.tsx",[],"/Users/milanmedlik/projects/qlgraph/frontend/src/components/common/DeleteModal.tsx",["205","206","207","208","209","210","211","212","213","214","215"],"import React, { useState, useContext } from 'react'\nimport gql from 'graphql-tag'\nimport { useQuery, useLazyQuery } from '@apollo/react-hooks'\nimport { useHistory } from \"react-router-dom\";\nimport { User, useUserDispatch, USER_LOGIN } from '../../contexts/userContext';\nimport { Modal, Form, Button, Alert } from 'react-bootstrap'\n\nexport interface IDeleteModalParams { \n    show: boolean, \n    onHide: () => void, \n    onDelete: (deleteObject: any) => void,\n    category: string,\n    deleteObject? : any\n    deleting? : boolean\n}\n\nexport const DeleteModal: React.FC<IDeleteModalParams> = ({ show, onHide, onDelete, category, deleteObject, deleting }) => {\n\n    const onDeleteAction = () => {\n        if(!deleting){\n            onDelete(deleteObject)\n        }\n    }\n\n    return (\n        <div>\n            <Modal show={show} onHide={onHide}>\n                <Modal.Header closeButton>\n                    <div>\n                        <Modal.Title>Delete {'>>'} {deleteObject && deleteObject.name}  {'<<'}</Modal.Title>\n                    </div>\n                    \n                </Modal.Header>\n\n                <Modal.Body>\n                    {!deleting ? (<p>Are you sure, you want delete {category} item with name <b>'{deleteObject && deleteObject.name}'</b> and id <i>'{deleteObject && deleteObject.id}'</i></p>) : \n                                (<p>Deleting {category} item with name '{deleteObject && deleteObject.name}' and id '{deleteObject && deleteObject.id}' ...</p>) }\n                </Modal.Body>\n\n                <Modal.Footer>\n                    <Button disabled={deleting} variant=\"danger\" type=\"submit\" onClick={onDeleteAction}>Delete</Button>\n                    <Button disabled={deleting} variant=\"primary\" onClick={onHide}>Close</Button>\n                </Modal.Footer>\n            </Modal>\n\n\n        </div>\n    )\n}\n\nexport default DeleteModal","/Users/milanmedlik/projects/qlgraph/frontend/src/components/editor/control.tsx",["216","217"],"import React, { useState, useEffect } from \"react\";\nimport { Form, FormControl, Button } from \"react-bootstrap\";\n\nexport type TControl = {\n  placeholder? : string\n  onChange: (env: any) => void\n  value: string\n}\n\nexport type TControlField = {\n  name: string\n  label?: string\n  placeholder?: string\n  control?: React.FC<TControl>\n  valid?: string\n}\n\nexport type TField = string | TControlField\n\nexport interface IBaseControl {\n  model: any;\n  onChange: (name: string, value:any) => void;\n  edit?: boolean\n  field: TField\n}\n\nexport const BaseControl: React.FC<IBaseControl> = ({ model, field, onChange, edit = false }) => {\n  const name = (field as TControlField).name ? (field as TControlField).name : field as string\n  const label = (field as TControlField).label ? (field as TControlField).label : name\n  const control = (field as TControlField).control ? (field as TControlField).control : null\n\n  const [value, setValue] = useState(model[name]);\n\n  useEffect(()=>{\n    setValue(model[name])\n  }, [field, model])\n\n  const onUpdate = (value:string) => {\n    const obj = {...model} as any\n    obj[name] = value\n\n    setValue(value)\n    onChange(name, value)\n  }\n\n  return (\n    <Form.Group controlId=\"formBasicEmail\">\n          <Form.Label>{label}</Form.Label>\n          {control ? \n            control({onChange:(env: any) => onUpdate(env.target.value), value}) :\n            <Form.Control\n              type=\"text\"\n              placeholder=\"\"\n              onChange={(env: any) => onUpdate(env.target.value)}\n              value={value}\n            />\n          }\n          <FormControl.Feedback type=\"valid\">\n            Yeah you did it!\n          </FormControl.Feedback>\n        </Form.Group>\n  );\n};\n\nexport default BaseControl","/Users/milanmedlik/projects/qlgraph/frontend/src/components/list/row.tsx",[],"/Users/milanmedlik/projects/qlgraph/frontend/src/components/list/row-item.tsx",["218","219"],"import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Button } from 'react-bootstrap'\nimport './row.scss'\n\n\nexport interface IFilteredFieldDesc {\n  name: string\n  title?: string\n  component?: React.FC<any>\n}\n\nexport type IFilteredField = IFilteredFieldDesc | string\n\nexport interface IListRowParams {\n  item: any\n  field: IFilteredField\n}\n\nconst getElementFromField = (item: any, field: IFilteredField) => {\n  const fieldDesc = field as IFilteredFieldDesc\n\n  const names = fieldDesc.name ? fieldDesc.name.split('.') : (field as string).split('.')\n  const element = item[names[0]]\n\n  return {element, name: names[0], names}\n}\n\nexport const ListRowItem: React.FC<IListRowParams> = ({ item, field }) => {\n  const {element, name, names} = getElementFromField(item, field)\n\n  if(!element) {\n    return (<>ERR NOT EXIST:{name}</>)\n  }\n\n  if((field as IFilteredFieldDesc).component) {\n    const component = (field as IFilteredFieldDesc).component\n    return (<>{component && component({value:element, names, item})}</>)\n  }\n\n  if(element.substr && element.length > 50) {\n    return (<>{element.substr(0, 47)}...</>)\n  }\n\n  if(element.push && element.reduce && names.length > 1) {\n    return (<>{(element as any[]).reduce((p, e)=>p + e[names[1]], '')}</>)\n  }\n\n  return (\n    <>\n    {element}\n    </>\n  );\n};\n\n","/Users/milanmedlik/projects/qlgraph/frontend/src/pages/projects/GraphQLPlayground.tsx",[],{"ruleId":"220","replacedBy":"221"},{"ruleId":"222","replacedBy":"223"},{"ruleId":"224","severity":1,"message":"225","line":1,"column":17,"nodeType":"226","messageId":"227","endLine":1,"endColumn":26},{"ruleId":"224","severity":1,"message":"228","line":6,"column":3,"nodeType":"226","messageId":"227","endLine":6,"endColumn":7},{"ruleId":"224","severity":1,"message":"229","line":4,"column":22,"nodeType":"226","messageId":"227","endLine":4,"endColumn":28},{"ruleId":"224","severity":1,"message":"230","line":1,"column":17,"nodeType":"226","messageId":"227","endLine":1,"endColumn":25},{"ruleId":"224","severity":1,"message":"225","line":1,"column":27,"nodeType":"226","messageId":"227","endLine":1,"endColumn":36},{"ruleId":"224","severity":1,"message":"230","line":1,"column":17,"nodeType":"226","messageId":"227","endLine":1,"endColumn":25},{"ruleId":"224","severity":1,"message":"225","line":1,"column":27,"nodeType":"226","messageId":"227","endLine":1,"endColumn":36},{"ruleId":"224","severity":1,"message":"231","line":1,"column":38,"nodeType":"226","messageId":"227","endLine":1,"endColumn":49},{"ruleId":"224","severity":1,"message":"230","line":1,"column":17,"nodeType":"226","messageId":"227","endLine":1,"endColumn":25},{"ruleId":"224","severity":1,"message":"225","line":1,"column":27,"nodeType":"226","messageId":"227","endLine":1,"endColumn":36},{"ruleId":"224","severity":1,"message":"230","line":1,"column":17,"nodeType":"226","messageId":"227","endLine":1,"endColumn":25},{"ruleId":"224","severity":1,"message":"225","line":1,"column":27,"nodeType":"226","messageId":"227","endLine":1,"endColumn":36},{"ruleId":"224","severity":1,"message":"231","line":1,"column":38,"nodeType":"226","messageId":"227","endLine":1,"endColumn":49},{"ruleId":"224","severity":1,"message":"225","line":1,"column":17,"nodeType":"226","messageId":"227","endLine":1,"endColumn":26},{"ruleId":"224","severity":1,"message":"232","line":3,"column":41,"nodeType":"226","messageId":"227","endLine":3,"endColumn":50},{"ruleId":"224","severity":1,"message":"233","line":5,"column":8,"nodeType":"226","messageId":"227","endLine":5,"endColumn":12},{"ruleId":"224","severity":1,"message":"234","line":6,"column":8,"nodeType":"226","messageId":"227","endLine":6,"endColumn":14},{"ruleId":"224","severity":1,"message":"235","line":7,"column":8,"nodeType":"226","messageId":"227","endLine":7,"endColumn":13},{"ruleId":"224","severity":1,"message":"228","line":2,"column":10,"nodeType":"226","messageId":"227","endLine":2,"endColumn":14},{"ruleId":"224","severity":1,"message":"236","line":5,"column":8,"nodeType":"226","messageId":"227","endLine":5,"endColumn":13},{"ruleId":"224","severity":1,"message":"228","line":2,"column":9,"nodeType":"226","messageId":"227","endLine":2,"endColumn":13},{"ruleId":"224","severity":1,"message":"237","line":5,"column":9,"nodeType":"226","messageId":"227","endLine":5,"endColumn":15},{"ruleId":"238","severity":1,"message":"239","line":29,"column":18,"nodeType":"240","messageId":"241","endLine":29,"endColumn":20},{"ruleId":"224","severity":1,"message":"225","line":1,"column":27,"nodeType":"226","messageId":"227","endLine":1,"endColumn":36},{"ruleId":"224","severity":1,"message":"242","line":14,"column":22,"nodeType":"226","messageId":"227","endLine":14,"endColumn":33},{"ruleId":"224","severity":1,"message":"243","line":14,"column":44,"nodeType":"226","messageId":"227","endLine":14,"endColumn":55},{"ruleId":"238","severity":1,"message":"244","line":17,"column":22,"nodeType":"240","messageId":"241","endLine":17,"endColumn":24},{"ruleId":"224","severity":1,"message":"245","line":48,"column":18,"nodeType":"226","messageId":"227","endLine":48,"endColumn":35},{"ruleId":"224","severity":1,"message":"246","line":48,"column":43,"nodeType":"226","messageId":"227","endLine":48,"endColumn":58},{"ruleId":"224","severity":1,"message":"247","line":48,"column":67,"nodeType":"226","messageId":"227","endLine":48,"endColumn":83},{"ruleId":"224","severity":1,"message":"248","line":60,"column":18,"nodeType":"226","messageId":"227","endLine":60,"endColumn":38},{"ruleId":"224","severity":1,"message":"249","line":60,"column":46,"nodeType":"226","messageId":"227","endLine":60,"endColumn":64},{"ruleId":"224","severity":1,"message":"250","line":60,"column":73,"nodeType":"226","messageId":"227","endLine":60,"endColumn":92},{"ruleId":"224","severity":1,"message":"225","line":1,"column":27,"nodeType":"226","messageId":"227","endLine":1,"endColumn":36},{"ruleId":"224","severity":1,"message":"251","line":4,"column":8,"nodeType":"226","messageId":"227","endLine":4,"endColumn":11},{"ruleId":"224","severity":1,"message":"252","line":7,"column":13,"nodeType":"226","messageId":"227","endLine":7,"endColumn":14},{"ruleId":"238","severity":1,"message":"244","line":57,"column":20,"nodeType":"240","messageId":"241","endLine":57,"endColumn":22},{"ruleId":"224","severity":1,"message":"253","line":66,"column":16,"nodeType":"226","messageId":"227","endLine":66,"endColumn":29},{"ruleId":"224","severity":1,"message":"254","line":66,"column":37,"nodeType":"226","messageId":"227","endLine":66,"endColumn":47},{"ruleId":"224","severity":1,"message":"255","line":66,"column":56,"nodeType":"226","messageId":"227","endLine":66,"endColumn":67},{"ruleId":"224","severity":1,"message":"256","line":77,"column":43,"nodeType":"226","messageId":"227","endLine":77,"endColumn":56},{"ruleId":"224","severity":1,"message":"257","line":77,"column":64,"nodeType":"226","messageId":"227","endLine":77,"endColumn":74},{"ruleId":"224","severity":1,"message":"258","line":77,"column":82,"nodeType":"226","messageId":"227","endLine":77,"endColumn":93},{"ruleId":"259","severity":1,"message":"260","line":107,"column":6,"nodeType":"261","endLine":107,"endColumn":15,"suggestions":"262"},{"ruleId":"224","severity":1,"message":"263","line":33,"column":35,"nodeType":"226","messageId":"227","endLine":33,"endColumn":40},{"ruleId":"224","severity":1,"message":"264","line":58,"column":10,"nodeType":"226","messageId":"227","endLine":58,"endColumn":19},{"ruleId":"238","severity":1,"message":"239","line":63,"column":13,"nodeType":"240","messageId":"241","endLine":63,"endColumn":15},{"ruleId":"238","severity":1,"message":"244","line":98,"column":10,"nodeType":"240","messageId":"241","endLine":98,"endColumn":12},{"ruleId":"224","severity":1,"message":"265","line":1,"column":27,"nodeType":"226","messageId":"227","endLine":1,"endColumn":37},{"ruleId":"224","severity":1,"message":"266","line":3,"column":10,"nodeType":"226","messageId":"227","endLine":3,"endColumn":18},{"ruleId":"224","severity":1,"message":"267","line":32,"column":30,"nodeType":"226","messageId":"227","endLine":32,"endColumn":34},{"ruleId":"224","severity":1,"message":"263","line":32,"column":36,"nodeType":"226","messageId":"227","endLine":32,"endColumn":41},{"ruleId":"224","severity":1,"message":"225","line":1,"column":26,"nodeType":"226","messageId":"227","endLine":1,"endColumn":35},{"ruleId":"224","severity":1,"message":"268","line":2,"column":10,"nodeType":"226","messageId":"227","endLine":2,"endColumn":13},{"ruleId":"224","severity":1,"message":"269","line":2,"column":21,"nodeType":"226","messageId":"227","endLine":2,"endColumn":26},{"ruleId":"224","severity":1,"message":"234","line":2,"column":28,"nodeType":"226","messageId":"227","endLine":2,"endColumn":34},{"ruleId":"238","severity":1,"message":"239","line":52,"column":19,"nodeType":"240","messageId":"241","endLine":52,"endColumn":21},{"ruleId":"238","severity":1,"message":"239","line":60,"column":28,"nodeType":"240","messageId":"241","endLine":60,"endColumn":30},{"ruleId":"224","severity":1,"message":"228","line":2,"column":9,"nodeType":"226","messageId":"227","endLine":2,"endColumn":13},{"ruleId":"224","severity":1,"message":"234","line":3,"column":27,"nodeType":"226","messageId":"227","endLine":3,"endColumn":33},{"ruleId":"224","severity":1,"message":"270","line":35,"column":10,"nodeType":"226","messageId":"227","endLine":35,"endColumn":25},{"ruleId":"224","severity":1,"message":"271","line":35,"column":27,"nodeType":"226","messageId":"227","endLine":35,"endColumn":45},{"ruleId":"224","severity":1,"message":"272","line":40,"column":10,"nodeType":"226","messageId":"227","endLine":40,"endColumn":17},{"ruleId":"238","severity":1,"message":"244","line":47,"column":20,"nodeType":"240","messageId":"241","endLine":47,"endColumn":22},{"ruleId":"224","severity":1,"message":"273","line":72,"column":18,"nodeType":"226","messageId":"227","endLine":72,"endColumn":31},{"ruleId":"224","severity":1,"message":"274","line":72,"column":40,"nodeType":"226","messageId":"227","endLine":72,"endColumn":51},{"ruleId":"238","severity":1,"message":"244","line":82,"column":22,"nodeType":"240","messageId":"241","endLine":82,"endColumn":24},{"ruleId":"224","severity":1,"message":"230","line":1,"column":17,"nodeType":"226","messageId":"227","endLine":1,"endColumn":25},{"ruleId":"224","severity":1,"message":"225","line":1,"column":27,"nodeType":"226","messageId":"227","endLine":1,"endColumn":36},{"ruleId":"224","severity":1,"message":"275","line":2,"column":16,"nodeType":"226","messageId":"227","endLine":2,"endColumn":27},{"ruleId":"224","severity":1,"message":"230","line":1,"column":17,"nodeType":"226","messageId":"227","endLine":1,"endColumn":25},{"ruleId":"224","severity":1,"message":"265","line":1,"column":27,"nodeType":"226","messageId":"227","endLine":1,"endColumn":37},{"ruleId":"224","severity":1,"message":"251","line":2,"column":8,"nodeType":"226","messageId":"227","endLine":2,"endColumn":11},{"ruleId":"224","severity":1,"message":"266","line":3,"column":10,"nodeType":"226","messageId":"227","endLine":3,"endColumn":18},{"ruleId":"224","severity":1,"message":"276","line":3,"column":20,"nodeType":"226","messageId":"227","endLine":3,"endColumn":32},{"ruleId":"224","severity":1,"message":"277","line":4,"column":10,"nodeType":"226","messageId":"227","endLine":4,"endColumn":20},{"ruleId":"224","severity":1,"message":"278","line":5,"column":10,"nodeType":"226","messageId":"227","endLine":5,"endColumn":14},{"ruleId":"224","severity":1,"message":"279","line":5,"column":16,"nodeType":"226","messageId":"227","endLine":5,"endColumn":31},{"ruleId":"224","severity":1,"message":"280","line":5,"column":33,"nodeType":"226","messageId":"227","endLine":5,"endColumn":43},{"ruleId":"224","severity":1,"message":"233","line":6,"column":17,"nodeType":"226","messageId":"227","endLine":6,"endColumn":21},{"ruleId":"224","severity":1,"message":"269","line":6,"column":31,"nodeType":"226","messageId":"227","endLine":6,"endColumn":36},{"ruleId":"224","severity":1,"message":"234","line":2,"column":29,"nodeType":"226","messageId":"227","endLine":2,"endColumn":35},{"ruleId":"259","severity":1,"message":"281","line":36,"column":6,"nodeType":"261","endLine":36,"endColumn":20,"suggestions":"282"},{"ruleId":"224","severity":1,"message":"228","line":2,"column":10,"nodeType":"226","messageId":"227","endLine":2,"endColumn":14},{"ruleId":"224","severity":1,"message":"234","line":3,"column":10,"nodeType":"226","messageId":"227","endLine":3,"endColumn":16},"no-native-reassign",["283"],"no-negated-in-lhs",["284"],"@typescript-eslint/no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'Link' is defined but never used.","'concat' is defined but never used.","'useState' is defined but never used.","'useCallback' is defined but never used.","'USER_INIT' is defined but never used.","'Form' is defined but never used.","'Button' is defined but never used.","'Modal' is defined but never used.","'Badge' is defined but never used.","'Navbar' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'userRefetch' is assigned a value but never used.","'userLoading' is assigned a value but never used.","Expected '===' and instead saw '=='.","'addMutaionLoading' is assigned a value but never used.","'addMutationData' is assigned a value but never used.","'addMutationError' is assigned a value but never used.","'removeMutaionLoading' is assigned a value but never used.","'removeMutationData' is assigned a value but never used.","'removeMutationError' is assigned a value but never used.","'gql' is defined but never used.","'_' is defined but never used.","'createLoading' is assigned a value but never used.","'createData' is assigned a value but never used.","'createError' is assigned a value but never used.","'updateLoading' is assigned a value but never used.","'updateData' is assigned a value but never used.","'updateError' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useCallback has missing dependencies: 'createProjectMutation' and 'updateProjectMutation'. Either include them or remove the dependency array.","ArrayExpression",["285"],"'error' is assigned a value but never used.","'validPass' is assigned a value but never used.","'useContext' is defined but never used.","'useQuery' is defined but never used.","'data' is assigned a value but never used.","'Col' is defined but never used.","'Alert' is defined but never used.","'showDeleteModal' is assigned a value but never used.","'setShowDeleteModal' is assigned a value but never used.","'loading' is assigned a value but never used.","'deleteLoading' is assigned a value but never used.","'deleteError' is assigned a value but never used.","'FormControl' is defined but never used.","'useLazyQuery' is defined but never used.","'useHistory' is defined but never used.","'User' is defined but never used.","'useUserDispatch' is defined but never used.","'USER_LOGIN' is defined but never used.","React Hook useEffect has a missing dependency: 'name'. Either include it or remove the dependency array.",["286"],"no-global-assign","no-unsafe-negation",{"desc":"287","fix":"288"},{"desc":"289","fix":"290"},"Update the dependencies array to be: [createProjectMutation, localId, updateProjectMutation]",{"range":"291","text":"292"},"Update the dependencies array to be: [field, model, name]",{"range":"293","text":"294"},[2991,3000],"[createProjectMutation, localId, updateProjectMutation]",[999,1013],"[field, model, name]"]